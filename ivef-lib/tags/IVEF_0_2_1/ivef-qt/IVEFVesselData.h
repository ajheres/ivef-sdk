/* 
 *  VesselData
 *
 *  VesselData is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Fri Mar 26 13:53:33 2010.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __VESSELDATA_H__
#define __VESSELDATA_H__

#include <QtCore>
#include "IVEFConstruction.h"
#include "IVEFIdentifier.h"

//-----------------------------------------------------------
//! \brief       Class definition of VesselData
//!
//! DATA regarding static elements of an object
//!

class VesselData : public QObject { 
    Q_OBJECT

public:
    //!constructor
    //!
    VesselData();
    //!copy constructor
    //!
    VesselData(const VesselData&);
    //!= operator
    //!
    VesselData & operator=(const VesselData&/*val*/);
    //!              sets the Construction: attributes of the object regarding the physical construction
    //!
    void setConstruction(Construction val);

    //!              gets the Construction: attributes of the object regarding the physical construction
    //!
    //! \return     Construction
    //!
    Construction getConstruction() const;

    //!              sets the Identifier: (local) Identification of vessel
    //!
    void setIdentifier(Identifier val);

    //!              gets the Identifier: (local) Identification of vessel
    //!
    //! \return     Identifier
    //!
    Identifier getIdentifier() const;

    //!              sets the Class: 0 = Unknown\n
    //!              1 = Vessel\n
    //!              2 = Aids to Navigate
    //!
    void setClass(int val);

    //!              gets the Class: 0 = Unknown\n
    //!              1 = Vessel\n
    //!              2 = Aids to Navigate
    //!
    //! \return     int
    //!
    int getClass() const;

    //!              returns true if Classis used (optional field).
    //!
    //! \return     bool
    bool hasClass() const;

    //!              sets the BlackListed: Vessel is blacklisted by a NCA
    //!
    void setBlackListed(bool val);

    //!              gets the BlackListed: Vessel is blacklisted by a NCA
    //!
    //! \return     bool
    //!
    bool getBlackListed() const;

    //!              returns true if BlackListedis used (optional field).
    //!
    //! \return     bool
    bool hasBlackListed() const;

    //!              sets the Id: The unique identification of this vesseldata. Valid from first message with TrackStatus!=Terminated to first message with TrackStatus=Terminated
    //!
    void setId(int val);

    //!              gets the Id: The unique identification of this vesseldata. Valid from first message with TrackStatus!=Terminated to first message with TrackStatus=Terminated
    //!
    //! \return     int
    //!
    int getId() const;

    //!              sets the SpecialAttention: Vessel is under special attention of the NCA or fairway authorities
    //!
    void setSpecialAttention(QString val);

    //!              gets the SpecialAttention: Vessel is under special attention of the NCA or fairway authorities
    //!
    //! \return     QString
    //!
    QString getSpecialAttention() const;

    //!              returns true if SpecialAttentionis used (optional field).
    //!
    //! \return     bool
    bool hasSpecialAttention() const;

    //!              sets the SourceId: Unique identification of the producer  (UN/LOCODE)  in case multiple producers exist on the same LOCODE, the local competent authority can optionally addended this with a local  code (e.g. BE ANR 01 = Antwerp, 01)
    //!
    void setSourceId(QString val);

    //!              gets the SourceId: Unique identification of the producer  (UN/LOCODE)  in case multiple producers exist on the same LOCODE, the local competent authority can optionally addended this with a local  code (e.g. BE ANR 01 = Antwerp, 01)
    //!
    //! \return     QString
    //!
    QString getSourceId() const;

    //!              returns true if SourceIdis used (optional field).
    //!
    //! \return     bool
    bool hasSourceId() const;

    //!              sets the SourceName: Identification of the originator of the data
    //!
    void setSourceName(QString val);

    //!              gets the SourceName: Identification of the originator of the data
    //!
    //! \return     QString
    //!
    QString getSourceName() const;

    //!              sets the SourceType: Source/originator type: 1 = AIS transponder 2 = VTS Plan Server 3 = Operator 4 = External source
    //!
    void setSourceType(int val);

    //!              gets the SourceType: Source/originator type: 1 = AIS transponder 2 = VTS Plan Server 3 = Operator 4 = External source
    //!
    //! \return     int
    //!
    int getSourceType() const;

    //!              sets the UpdateTime: Date and time in UTC format (YYYY-MM-DDThh:mm:ss.sssZ)  (subset of ISO 8601) this data was compiled
    //!
    void setUpdateTime(QDateTime val);

    //!              gets the UpdateTime: Date and time in UTC format (YYYY-MM-DDThh:mm:ss.sssZ)  (subset of ISO 8601) this data was compiled
    //!
    //! \return     QDateTime
    //!
    QDateTime getUpdateTime() const;

    //!              generates XML of this object including attributes and child elements
    //!
    //! \return     QString
    QString toXML();

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString();

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead);

    //!              encodes a string returning the encoded string
    //!
    //! \return     QString
    QString encode(QString str);


private:
    Construction m_construction;
    Identifier m_identifier;
    int m_class;
    bool m_classPresent;
    bool m_blackListed;
    bool m_blackListedPresent;
    int m_id;
    QString m_specialAttention;
    bool m_specialAttentionPresent;
    QString m_sourceId;
    bool m_sourceIdPresent;
    QString m_sourceName;
    int m_sourceType;
    QDateTime m_updateTime;

}; 

#endif

