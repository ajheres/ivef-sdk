<?php

// 
//  Parser
//
//  Parser is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  Parser is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by xsd2code on Thu Aug 26 11:23:11 2010.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFMSG_LoginRequest.php";
require_once "IVEFMSG_LoginResponse.php";
require_once "IVEFMSG_Logout.php";
require_once "IVEFMSG_Ping.php";
require_once "IVEFMSG_Pong.php";
require_once "IVEFMSG_ServerStatus.php";
require_once "IVEFMSG_ServiceRequest.php";
require_once "IVEFMSG_VesselData.php";

class Parser { 

    public function messageNameOfXMLString($data) { 

        $xml = new SimpleXMLElement($data);
        return $xml->getName();
    }

    public function parseXMLMessage($data) { 

        $tag = $this->messageNameOfXMLString($data);

        if ($tag == "MSG_LoginRequest") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_LoginRequest($xml);
        }  else if ($tag == "MSG_LoginResponse") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_LoginResponse($xml);
        }  else if ($tag == "MSG_Logout") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_Logout($xml);
        }  else if ($tag == "MSG_Ping") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_Ping($xml);
        }  else if ($tag == "MSG_Pong") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_Pong($xml);
        }  else if ($tag == "MSG_ServerStatus") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_ServerStatus($xml);
        }  else if ($tag == "MSG_ServiceRequest") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_ServiceRequest($xml);
        }  else if ($tag == "MSG_VesselData") {
            $xml = new SimpleXMLElement($data);
            return $this->parseMSG_VesselData($xml);
        } 
        return; // error no root message found
    }

    private function hasAttribute($object, $attribute) { 
        foreach($object->attributes() as $a => $b) { 
            if ($a == $attribute) { 
                return true; 
            }     
        } 
        return false; 
    }

    private function hasChild($object, $child) { 
        foreach($object->children() as $a => $b) { 
            if ($a == $child) { 
                return true; 
            }     
        } 
        return false; 
    }

    private function countOfChild($object, $child) { 
        $count = 0;
        foreach($object->children() as $a => $b) { 
            if ($a == $child) { 
                $count++; 
            }     
        } 
        return $count; 
    }

    public function parseMSG_LoginRequest( $simplexml ) {

        $element = new MSG_LoginRequest();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    private function parseBody( $simplexml ) {

        $element = new Body();

        if ($this->hasChild($simplexml, "LoginRequest")) { 
            $child = $this->parseLoginRequest($simplexml->LoginRequest);
            $element->setLoginRequest($child);
        }
        if ($this->hasChild($simplexml, "LoginResponse")) { 
            $child = $this->parseLoginResponse($simplexml->LoginResponse);
            $element->setLoginResponse($child);
        }
        if ($this->hasChild($simplexml, "Logout")) { 
            $child = $this->parseLogout($simplexml->Logout);
            $element->setLogout($child);
        }
        if ($this->hasChild($simplexml, "Ping")) { 
            $child = $this->parsePing($simplexml->Ping);
            $element->setPing($child);
        }
        if ($this->hasChild($simplexml, "Pong")) { 
            $child = $this->parsePong($simplexml->Pong);
            $element->setPong($child);
        }
        if ($this->hasChild($simplexml, "ServerStatus")) { 
            $child = $this->parseServerStatus($simplexml->ServerStatus);
            $element->setServerStatus($child);
        }
        if ($this->hasChild($simplexml, "ServiceRequest")) { 
            $child = $this->parseServiceRequest($simplexml->ServiceRequest);
            $element->setServiceRequest($child);
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "VesselData"); $i++) { 
            $child = $this->parseVesselData($simplexml->VesselData[$i]);
            $element->addVesselData($child);
        }
        return $element;
    }

    public function parseMSG_LoginResponse( $simplexml ) {

        $element = new MSG_LoginResponse();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    public function parseMSG_Logout( $simplexml ) {

        $element = new MSG_Logout();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    private function parseLogout( $simplexml ) {

        $element = new Logout();

        return $element;
    }

    public function parseMSG_Ping( $simplexml ) {

        $element = new MSG_Ping();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    public function parseMSG_Pong( $simplexml ) {

        $element = new MSG_Pong();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    public function parseMSG_ServerStatus( $simplexml ) {

        $element = new MSG_ServerStatus();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    public function parseMSG_ServiceRequest( $simplexml ) {

        $element = new MSG_ServiceRequest();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    public function parseMSG_VesselData( $simplexml ) {

        $element = new MSG_VesselData();

        if ($this->hasChild($simplexml, "Header")) { 
            $child = $this->parseHeader($simplexml->Header);
            $element->setHeader($child);
        } else { 
            // required element is missing
        }
        if ($this->hasChild($simplexml, "Body")) { 
            $child = $this->parseBody($simplexml->Body);
            $element->setBody($child);
        } else { 
            // required element is missing
        }
        return $element;
    }

    private function parseHeader( $simplexml ) {

        $element = new Header();

        if ($this->hasAttribute($simplexml, "Version")) { 
            $element->setVersion((string) $simplexml["Version"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "MsgRefId")) { 
            $element->setMsgRefId((string) $simplexml["MsgRefId"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parseLoginRequest( $simplexml ) {

        $element = new LoginRequest();

        if ($this->hasAttribute($simplexml, "Name")) { 
            $element->setName((string) $simplexml["Name"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Password")) { 
            $element->setPassword((string) $simplexml["Password"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Encryption")) { 
            $element->setEncryption((string) $simplexml["Encryption"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parseLoginResponse( $simplexml ) {

        $element = new LoginResponse();

        if ($this->hasAttribute($simplexml, "MsgId")) { 
            $element->setMsgId((string) $simplexml["MsgId"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Result")) { 
            $element->setResult((string) $simplexml["Result"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Reason")) { 
            $element->setReason((string) $simplexml["Reason"]);
        }
        return $element;
    }

    private function parsePing( $simplexml ) {

        $element = new Ping();

        if ($this->hasAttribute($simplexml, "TimeStamp")) { 
            $element->setTimeStamp((string) $simplexml["TimeStamp"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parsePong( $simplexml ) {

        $element = new Pong();

        if ($this->hasAttribute($simplexml, "TimeStamp")) { 
            $element->setTimeStamp((string) $simplexml["TimeStamp"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "MsgId")) { 
            $element->setMsgId((string) $simplexml["MsgId"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "SourceId")) { 
            $element->setSourceId((string) $simplexml["SourceId"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parsePos( $simplexml ) {

        $element = new Pos();

        if ($this->hasAttribute($simplexml, "Lat")) { 
            $element->setLat((string) $simplexml["Lat"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Long")) { 
            $element->setLong((string) $simplexml["Long"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parsePosReport( $simplexml ) {

        $element = new PosReport();

        if ($this->hasChild($simplexml, "Pos")) { 
            $child = $this->parsePos($simplexml->Pos);
            $element->setPos($child);
        } else { 
            // required element is missing
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "Sensor"); $i++) { 
            $child = $this->parseSensor($simplexml->Sensor[$i]);
            $element->addSensor($child);
        }
        if ($this->hasAttribute($simplexml, "Id")) { 
            $element->setId((string) $simplexml["Id"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "SourceId")) { 
            $element->setSourceId((string) $simplexml["SourceId"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "UpdateTime")) { 
            $element->setUpdateTime((string) $simplexml["UpdateTime"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "UpdateTimeRadar")) { 
            $element->setUpdateTimeRadar((string) $simplexml["UpdateTimeRadar"]);
        }
        if ($this->hasAttribute($simplexml, "UpdateTimeAIS")) { 
            $element->setUpdateTimeAIS((string) $simplexml["UpdateTimeAIS"]);
        }
        if ($this->hasAttribute($simplexml, "UpdateTimeDR")) { 
            $element->setUpdateTimeDR((string) $simplexml["UpdateTimeDR"]);
        }
        if ($this->hasAttribute($simplexml, "ExpectedTimeForNextUpdate")) { 
            $element->setExpectedTimeForNextUpdate((string) $simplexml["ExpectedTimeForNextUpdate"]);
        }
        if ($this->hasAttribute($simplexml, "SOG")) { 
            $element->setSOG((string) $simplexml["SOG"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "COG")) { 
            $element->setCOG((string) $simplexml["COG"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Lost")) { 
            $element->setLost((string) $simplexml["Lost"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "RateOfTurn")) { 
            $element->setRateOfTurn((string) $simplexml["RateOfTurn"]);
        }
        if ($this->hasAttribute($simplexml, "Orientation")) { 
            $element->setOrientation((string) $simplexml["Orientation"]);
        }
        if ($this->hasAttribute($simplexml, "Length")) { 
            $element->setLength((string) $simplexml["Length"]);
        }
        if ($this->hasAttribute($simplexml, "Breadth")) { 
            $element->setBreadth((string) $simplexml["Breadth"]);
        }
        if ($this->hasAttribute($simplexml, "Altitude")) { 
            $element->setAltitude((string) $simplexml["Altitude"]);
        }
        if ($this->hasAttribute($simplexml, "NavStatus")) { 
            $element->setNavStatus((string) $simplexml["NavStatus"]);
        }
        if ($this->hasAttribute($simplexml, "UpdSensorType")) { 
            $element->setUpdSensorType((string) $simplexml["UpdSensorType"]);
        }
        if ($this->hasAttribute($simplexml, "ATONOffPos")) { 
            $element->setATONOffPos((string) $simplexml["ATONOffPos"]);
        }
        return $element;
    }

    private function parseSensor( $simplexml ) {

        $element = new Sensor();

        if ($this->hasAttribute($simplexml, "SenId")) { 
            $element->setSenId((string) $simplexml["SenId"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "TrkId")) { 
            $element->setTrkId((string) $simplexml["TrkId"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parseStaticData( $simplexml ) {

        $element = new StaticData();

        if ($this->hasAttribute($simplexml, "Id")) { 
            $element->setId((string) $simplexml["Id"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "SourceName")) { 
            $element->setSourceName((string) $simplexml["SourceName"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Source")) { 
            $element->setSource((string) $simplexml["Source"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Length")) { 
            $element->setLength((string) $simplexml["Length"]);
        }
        if ($this->hasAttribute($simplexml, "Breadth")) { 
            $element->setBreadth((string) $simplexml["Breadth"]);
        }
        if ($this->hasAttribute($simplexml, "Callsign")) { 
            $element->setCallsign((string) $simplexml["Callsign"]);
        }
        if ($this->hasAttribute($simplexml, "ShipName")) { 
            $element->setShipName((string) $simplexml["ShipName"]);
        }
        if ($this->hasAttribute($simplexml, "ObjectType")) { 
            $element->setObjectType((string) $simplexml["ObjectType"]);
        }
        if ($this->hasAttribute($simplexml, "ShipType")) { 
            $element->setShipType((string) $simplexml["ShipType"]);
        }
        if ($this->hasAttribute($simplexml, "IMO")) { 
            $element->setIMO((string) $simplexml["IMO"]);
        }
        if ($this->hasAttribute($simplexml, "MMSI")) { 
            $element->setMMSI((string) $simplexml["MMSI"]);
        }
        if ($this->hasAttribute($simplexml, "ATONType")) { 
            $element->setATONType((string) $simplexml["ATONType"]);
        }
        if ($this->hasAttribute($simplexml, "ATONName")) { 
            $element->setATONName((string) $simplexml["ATONName"]);
        }
        if ($this->hasAttribute($simplexml, "AntPosDistFromFront")) { 
            $element->setAntPosDistFromFront((string) $simplexml["AntPosDistFromFront"]);
        }
        if ($this->hasAttribute($simplexml, "AntPosDistFromLeft")) { 
            $element->setAntPosDistFromLeft((string) $simplexml["AntPosDistFromLeft"]);
        }
        if ($this->hasAttribute($simplexml, "NatLangShipName")) { 
            $element->setNatLangShipName((string) $simplexml["NatLangShipName"]);
        }
        if ($this->hasAttribute($simplexml, "PortOfRegistry")) { 
            $element->setPortOfRegistry((string) $simplexml["PortOfRegistry"]);
        }
        if ($this->hasAttribute($simplexml, "CountryFlag")) { 
            $element->setCountryFlag((string) $simplexml["CountryFlag"]);
        }
        if ($this->hasAttribute($simplexml, "MaxAirDraught")) { 
            $element->setMaxAirDraught((string) $simplexml["MaxAirDraught"]);
        }
        if ($this->hasAttribute($simplexml, "MaxDraught")) { 
            $element->setMaxDraught((string) $simplexml["MaxDraught"]);
        }
        if ($this->hasAttribute($simplexml, "DeepWaterVesselind")) { 
            $element->setDeepWaterVesselind((string) $simplexml["DeepWaterVesselind"]);
        }
        return $element;
    }

    private function parseServerStatus( $simplexml ) {

        $element = new ServerStatus();

        if ($this->hasAttribute($simplexml, "Status")) { 
            $element->setStatus((string) $simplexml["Status"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Details")) { 
            $element->setDetails((string) $simplexml["Details"]);
        }
        return $element;
    }

    private function parseTaggedItem( $simplexml ) {

        $element = new TaggedItem();

        if ($this->hasAttribute($simplexml, "Key")) { 
            $element->setKey((string) $simplexml["Key"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Value")) { 
            $element->setValue((string) $simplexml["Value"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parseServiceRequest( $simplexml ) {

        $element = new ServiceRequest();

        for ($i = 0; $i < $this->countOfChild($simplexml, "Area"); $i++) { 
            $child = $this->parseArea($simplexml->Area[$i]);
            $element->addArea($child);
        }
        if ($this->hasChild($simplexml, "Transmission")) { 
            $child = $this->parseTransmission($simplexml->Transmission);
            $element->setTransmission($child);
        } else { 
            // required element is missing
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "Item"); $i++) { 
            $child = $this->parseItem($simplexml->Item[$i]);
            $element->addItem($child);
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "Object"); $i++) { 
            $child = $this->parseObject($simplexml->Object[$i]);
            $element->addObject($child);
        }
        return $element;
    }

    private function parseArea( $simplexml ) {

        $element = new Area();

        for ($i = 0; $i < $this->countOfChild($simplexml, "Pos"); $i++) { 
            $child = $this->parsePos($simplexml->Pos[$i]);
            $element->addPos($child);
        }
        return $element;
    }

    private function parseTransmission( $simplexml ) {

        $element = new Transmission();

        if ($this->hasAttribute($simplexml, "Type")) { 
            $element->setType((string) $simplexml["Type"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Period")) { 
            $element->setPeriod((string) $simplexml["Period"]);
        }
        return $element;
    }

    private function parseItem( $simplexml ) {

        $element = new Item();

        if ($this->hasAttribute($simplexml, "Element")) { 
            $element->setElement((string) $simplexml["Element"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Field")) { 
            $element->setField((string) $simplexml["Field"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parseObject( $simplexml ) {

        $element = new Object();

        if ($this->hasAttribute($simplexml, "FileName")) { 
            $element->setFileName((string) $simplexml["FileName"]);
        } else { 
            // required attribute is missing
        }
        return $element;
    }

    private function parseVesselData( $simplexml ) {

        $element = new VesselData();

        if ($this->hasChild($simplexml, "PosReport")) { 
            $child = $this->parsePosReport($simplexml->PosReport);
            $element->setPosReport($child);
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "StaticData"); $i++) { 
            $child = $this->parseStaticData($simplexml->StaticData[$i]);
            $element->addStaticData($child);
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "Voyage"); $i++) { 
            $child = $this->parseVoyage($simplexml->Voyage[$i]);
            $element->addVoyage($child);
        }
        for ($i = 0; $i < $this->countOfChild($simplexml, "TaggedItem"); $i++) { 
            $child = $this->parseTaggedItem($simplexml->TaggedItem[$i]);
            $element->addTaggedItem($child);
        }
        return $element;
    }

    private function parseVoyage( $simplexml ) {

        $element = new Voyage();

        if ($this->hasAttribute($simplexml, "Id")) { 
            $element->setId((string) $simplexml["Id"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "SourceName")) { 
            $element->setSourceName((string) $simplexml["SourceName"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "Source")) { 
            $element->setSource((string) $simplexml["Source"]);
        } else { 
            // required attribute is missing
        }
        if ($this->hasAttribute($simplexml, "CargoType")) { 
            $element->setCargoType((string) $simplexml["CargoType"]);
        }
        if ($this->hasAttribute($simplexml, "Destination")) { 
            $element->setDestination((string) $simplexml["Destination"]);
        }
        if ($this->hasAttribute($simplexml, "ETA")) { 
            $element->setETA((string) $simplexml["ETA"]);
        }
        if ($this->hasAttribute($simplexml, "ATA")) { 
            $element->setATA((string) $simplexml["ATA"]);
        }
        if ($this->hasAttribute($simplexml, "PersonsOnBoard")) { 
            $element->setPersonsOnBoard((string) $simplexml["PersonsOnBoard"]);
        }
        if ($this->hasAttribute($simplexml, "AirDraught")) { 
            $element->setAirDraught((string) $simplexml["AirDraught"]);
        }
        if ($this->hasAttribute($simplexml, "Draught")) { 
            $element->setDraught((string) $simplexml["Draught"]);
        }
        return $element;
    }


}
?>
