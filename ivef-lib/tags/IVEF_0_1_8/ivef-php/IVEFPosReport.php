<?php

// 
//  PosReport
//
//  PosReport is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  PosReport is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by xsd2code on Thu Aug 26 11:23:11 2010.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFPos.php";
require_once "IVEFSensor.php";

class PosReport { 

    var $m_pos; // default value is uninitialized
    var $m_posPresent;
    var $m_sensor; // default value is uninitialized
    var $m_sensorPresent;
    var $m_id; // default value is uninitialized
    var $m_idPresent;
    var $m_sourceId; // default value is uninitialized
    var $m_sourceIdPresent;
    var $m_updateTime; // default value is uninitialized
    var $m_updateTimePresent;
    var $m_updateTimeRadar; // default value is uninitialized
    var $m_updateTimeRadarPresent;
    var $m_updateTimeAIS; // default value is uninitialized
    var $m_updateTimeAISPresent;
    var $m_updateTimeDR; // default value is uninitialized
    var $m_updateTimeDRPresent;
    var $m_expectedTimeForNextUpdate; // default value is uninitialized
    var $m_expectedTimeForNextUpdatePresent;
    var $m_SOG; // default value is uninitialized
    var $m_SOGPresent;
    var $m_COG; // default value is uninitialized
    var $m_COGPresent;
    var $m_lost; // default value is uninitialized
    var $m_lostPresent;
    var $m_rateOfTurn; // default value is uninitialized
    var $m_rateOfTurnPresent;
    var $m_orientation; // default value is uninitialized
    var $m_orientationPresent;
    var $m_length; // default value is uninitialized
    var $m_lengthPresent;
    var $m_breadth; // default value is uninitialized
    var $m_breadthPresent;
    var $m_altitude; // default value is uninitialized
    var $m_altitudePresent;
    var $m_navStatus; // default value is uninitialized
    var $m_navStatusPresent;
    var $m_updSensorType; // default value is uninitialized
    var $m_updSensorTypePresent;
    var $m_ATONOffPos; // default value is uninitialized
    var $m_ATONOffPosPresent;

    public function PosReport() {

        date_default_timezone_set('UTC');
        $this->m_posPresent = false;
        $this->m_pos = new Pos();
        $this->m_sensorPresent = false;
        $this->m_sensors = array();
        $this->m_idPresent = false;
        $this->m_sourceIdPresent = false;
        $this->m_updateTimePresent = false;
        $this->m_updateTimeRadarPresent = false;
        $this->m_updateTimeAISPresent = false;
        $this->m_updateTimeDRPresent = false;
        $this->m_expectedTimeForNextUpdatePresent = false;
        $this->m_SOGPresent = false;
        $this->m_COGPresent = false;
        $this->m_lostPresent = false;
        $this->m_rateOfTurnPresent = false;
        $this->m_orientationPresent = false;
        $this->m_lengthPresent = false;
        $this->m_breadthPresent = false;
        $this->m_altitudePresent = false;
        $this->m_navStatusPresent = false;
        $this->m_updSensorTypePresent = false;
        $this->m_ATONOffPosPresent = false;
    }

    public function setPos( $val ) {

        $this->m_posPresent = true;
        $this->m_pos = $val;
        return true;
    }

    public function getPos() {

        return $this->m_pos;
    }

    public function removeSensor(Sensor $val ) {
          for($i=0; $i< count($this->m_sensors); $i++) {
             if($this->m_sensors[i] == $val) {
                 unset($this->m_sensors[i]);
             }
          }
        return true;
    }

    public function addSensor(Sensor $val ) {

        $this->m_sensors[] = $val;
        return true;
    }

    public function getSensorAt($i) {

        return $this->m_sensors[$i];
    }

    public function countOfSensors() {

        return count($this->m_sensors);
    }

    public function setId( $val ) {

        $this->m_idPresent = true;
        $this->m_id = $val;
        return true;
    }

    public function getId() {

        return $this->m_id;
    }

    public function setSourceId( $val ) {

        $this->m_sourceIdPresent = true;
        $this->m_sourceId = $val;
        return true;
    }

    public function getSourceId() {

        return $this->m_sourceId;
    }

    public function setUpdateTime( $val ) {

        $this->m_updateTimePresent = true;
        $this->m_updateTime = $val;
        return true;
    }

    public function getUpdateTime() {

        return $this->m_updateTime;
    }

    public function setUpdateTimeRadar( $val ) {

        $this->m_updateTimeRadarPresent = true;
        $this->m_updateTimeRadar = $val;
        return true;
    }

    public function getUpdateTimeRadar() {

        return $this->m_updateTimeRadar;
    }

    public function hasUpdateTimeRadar() {

        return $this->m_updateTimeRadarPresent;
    }

    public function setUpdateTimeAIS( $val ) {

        $this->m_updateTimeAISPresent = true;
        $this->m_updateTimeAIS = $val;
        return true;
    }

    public function getUpdateTimeAIS() {

        return $this->m_updateTimeAIS;
    }

    public function hasUpdateTimeAIS() {

        return $this->m_updateTimeAISPresent;
    }

    public function setUpdateTimeDR( $val ) {

        $this->m_updateTimeDRPresent = true;
        $this->m_updateTimeDR = $val;
        return true;
    }

    public function getUpdateTimeDR() {

        return $this->m_updateTimeDR;
    }

    public function hasUpdateTimeDR() {

        return $this->m_updateTimeDRPresent;
    }

    public function setExpectedTimeForNextUpdate( $val ) {

        $this->m_expectedTimeForNextUpdatePresent = true;
        $this->m_expectedTimeForNextUpdate = $val;
        return true;
    }

    public function getExpectedTimeForNextUpdate() {

        return $this->m_expectedTimeForNextUpdate;
    }

    public function hasExpectedTimeForNextUpdate() {

        return $this->m_expectedTimeForNextUpdatePresent;
    }

    public function setSOG( $val ) {

        if ($val < 0)
          return false;
        $this->m_SOGPresent = true;
        $this->m_SOG = $val;
        return true;
    }

    public function getSOG() {

        return $this->m_SOG;
    }

    public function setCOG( $val ) {

        if ($val < 0)
          return false;
        if ($val > 360)
          return false;
        $this->m_COGPresent = true;
        $this->m_COG = $val;
        return true;
    }

    public function getCOG() {

        return $this->m_COG;
    }

    public function setLost( $val ) {

        if ( ( $val != "no" ) &&
             ( $val != "yes" ) )
            return false;
        $this->m_lostPresent = true;
        $this->m_lost = $val;
        return true;
    }

    public function getLost() {

        return $this->m_lost;
    }

    public function setRateOfTurn( $val ) {

        $this->m_rateOfTurnPresent = true;
        $this->m_rateOfTurn = $val;
        return true;
    }

    public function getRateOfTurn() {

        return $this->m_rateOfTurn;
    }

    public function hasRateOfTurn() {

        return $this->m_rateOfTurnPresent;
    }

    public function setOrientation( $val ) {

        if ($val < 0)
          return false;
        if ($val > 360)
          return false;
        $this->m_orientationPresent = true;
        $this->m_orientation = $val;
        return true;
    }

    public function getOrientation() {

        return $this->m_orientation;
    }

    public function hasOrientation() {

        return $this->m_orientationPresent;
    }

    public function setLength( $val ) {

        if ($val < 0)
          return false;
        $this->m_lengthPresent = true;
        $this->m_length = $val;
        return true;
    }

    public function getLength() {

        return $this->m_length;
    }

    public function hasLength() {

        return $this->m_lengthPresent;
    }

    public function setBreadth( $val ) {

        if ($val < 0)
          return false;
        $this->m_breadthPresent = true;
        $this->m_breadth = $val;
        return true;
    }

    public function getBreadth() {

        return $this->m_breadth;
    }

    public function hasBreadth() {

        return $this->m_breadthPresent;
    }

    public function setAltitude( $val ) {

        $this->m_altitudePresent = true;
        $this->m_altitude = $val;
        return true;
    }

    public function getAltitude() {

        return $this->m_altitude;
    }

    public function hasAltitude() {

        return $this->m_altitudePresent;
    }

    public function setNavStatus( $val ) {

        if ( ( $val != 0 ) &&
             ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) &&
             ( $val != 4 ) &&
             ( $val != 5 ) &&
             ( $val != 6 ) &&
             ( $val != 7 ) &&
             ( $val != 8 ) &&
             ( $val != 9 ) &&
             ( $val != 10 ) &&
             ( $val != 11 ) &&
             ( $val != 12 ) &&
             ( $val != 13 ) &&
             ( $val != 14 ) &&
             ( $val != 15 ) )
            return false;
        $this->m_navStatusPresent = true;
        $this->m_navStatus = $val;
        return true;
    }

    public function getNavStatus() {

        return $this->m_navStatus;
    }

    public function hasNavStatus() {

        return $this->m_navStatusPresent;
    }

    public function setUpdSensorType( $val ) {

        if ( ( $val != 1 ) &&
             ( $val != 2 ) &&
             ( $val != 3 ) &&
             ( $val != 4 ) &&
             ( $val != 5 ) )
            return false;
        $this->m_updSensorTypePresent = true;
        $this->m_updSensorType = $val;
        return true;
    }

    public function getUpdSensorType() {

        return $this->m_updSensorType;
    }

    public function hasUpdSensorType() {

        return $this->m_updSensorTypePresent;
    }

    public function setATONOffPos( $val ) {

        $this->m_ATONOffPosPresent = true;
        $this->m_ATONOffPos = $val;
        return true;
    }

    public function getATONOffPos() {

        return $this->m_ATONOffPos;
    }

    public function hasATONOffPos() {

        return $this->m_ATONOffPosPresent;
    }

    public function toXML() {

        $xml = new SimpleXMLElement("<PosReport></PosReport>");

        if ( $this->m_idPresent ) {
            $xml->addAttribute('Id', $this->m_id);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_sourceIdPresent ) {
            $xml->addAttribute('SourceId', $this->m_sourceId);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_updateTimePresent ) {
            $xml->addAttribute('UpdateTime', $this->m_updateTime);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasUpdateTimeRadar() ) {
            $xml->addAttribute('UpdateTimeRadar', $this->m_updateTimeRadar);
        }
        if ( $this->hasUpdateTimeAIS() ) {
            $xml->addAttribute('UpdateTimeAIS', $this->m_updateTimeAIS);
        }
        if ( $this->hasUpdateTimeDR() ) {
            $xml->addAttribute('UpdateTimeDR', $this->m_updateTimeDR);
        }
        if ( $this->hasExpectedTimeForNextUpdate() ) {
            $xml->addAttribute('ExpectedTimeForNextUpdate', $this->m_expectedTimeForNextUpdate);
        }
        if ( $this->m_SOGPresent ) {
            $xml->addAttribute('SOG', number_format($this->m_SOG, 6));
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_COGPresent ) {
            $xml->addAttribute('COG', number_format($this->m_COG, 1));
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->m_lostPresent ) {
            $xml->addAttribute('Lost', $this->m_lost);
        } else { 
            return ""; // not all required attributes have been set 
        } 
        if ( $this->hasRateOfTurn() ) {
            $xml->addAttribute('RateOfTurn', number_format($this->m_rateOfTurn, 6));
        }
        if ( $this->hasOrientation() ) {
            $xml->addAttribute('Orientation', number_format($this->m_orientation, 6));
        }
        if ( $this->hasLength() ) {
            $xml->addAttribute('Length', number_format($this->m_length, 6));
        }
        if ( $this->hasBreadth() ) {
            $xml->addAttribute('Breadth', number_format($this->m_breadth, 6));
        }
        if ( $this->hasAltitude() ) {
            $xml->addAttribute('Altitude', number_format($this->m_altitude, 6));
        }
        if ( $this->hasNavStatus() ) {
            $xml->addAttribute('NavStatus', $this->m_navStatus);
        }
        if ( $this->hasUpdSensorType() ) {
            $xml->addAttribute('UpdSensorType', $this->m_updSensorType);
        }
        if ( $this->hasATONOffPos() ) {
            $xml->addAttribute('ATONOffPos', $this->m_ATONOffPos);
        }
        if ( $this->m_posPresent ) {
            $dom = dom_import_simplexml($xml);
            $child_as_xml = $this->m_pos->toXML();
            $child_as_simplexml = new SimpleXMLElement($child_as_xml);
            $child_as_dom = dom_import_simplexml($child_as_simplexml);
            $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
            $dom->appendChild($child_as_leaf);
            $xml = simplexml_import_dom($dom);
        } else { 
            return ""; // not all required data members have been set 
        } 
        if ( count($this->m_sensors) < 0) {
            return ""; // not enough values
        }
        if ( count($this->m_sensors) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_sensors as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML();
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "PosReport\n";

        $str .= $lead . "    Id = " . $this->m_id . "\n";
        $str .= $lead . "    SourceId = " . $this->m_sourceId . "\n";
        $str .= $lead . "    UpdateTime = " . $this->m_updateTime . "\n";
        if ( $this->hasUpdateTimeRadar() ) {
            $str .= $lead . "    UpdateTimeRadar = " . $this->m_updateTimeRadar . "\n";
        }
        if ( $this->hasUpdateTimeAIS() ) {
            $str .= $lead . "    UpdateTimeAIS = " . $this->m_updateTimeAIS . "\n";
        }
        if ( $this->hasUpdateTimeDR() ) {
            $str .= $lead . "    UpdateTimeDR = " . $this->m_updateTimeDR . "\n";
        }
        if ( $this->hasExpectedTimeForNextUpdate() ) {
            $str .= $lead . "    ExpectedTimeForNextUpdate = " . $this->m_expectedTimeForNextUpdate . "\n";
        }
        $str .= $lead . "    SOG = " . number_format($this->m_SOG, 6) . "\n";
        $str .= $lead . "    COG = " . number_format($this->m_COG, 1) . "\n";
        $str .= $lead . "    Lost = " . $this->m_lost . "\n";
        if ( $this->hasRateOfTurn() ) {
            $str .= $lead . "    RateOfTurn = " . number_format($this->m_rateOfTurn, 6) . "\n";
        }
        if ( $this->hasOrientation() ) {
            $str .= $lead . "    Orientation = " . number_format($this->m_orientation, 6) . "\n";
        }
        if ( $this->hasLength() ) {
            $str .= $lead . "    Length = " . number_format($this->m_length, 6) . "\n";
        }
        if ( $this->hasBreadth() ) {
            $str .= $lead . "    Breadth = " . number_format($this->m_breadth, 6) . "\n";
        }
        if ( $this->hasAltitude() ) {
            $str .= $lead . "    Altitude = " . number_format($this->m_altitude, 6) . "\n";
        }
        if ( $this->hasNavStatus() ) {
            $str .= $lead . "    NavStatus = " . $this->m_navStatus . "\n";
        }
        if ( $this->hasUpdSensorType() ) {
            $str .= $lead . "    UpdSensorType = " . $this->m_updSensorType . "\n";
        }
        if ( $this->hasATONOffPos() ) {
            $str .= $lead . "    ATONOffPos = " . $this->m_ATONOffPos . "\n";
        }
        $str .=  $this->m_pos->toStringWithLead($lead . "    ");
        foreach($this->m_sensors as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }

        return $str;
    }
}
?>
