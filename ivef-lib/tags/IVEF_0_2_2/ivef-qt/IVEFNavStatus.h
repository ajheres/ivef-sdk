/* 
 *  NavStatus
 *
 *  NavStatus is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Tue May 18 15:08:32 2010.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __NAVSTATUS_H__
#define __NAVSTATUS_H__

#include <QtCore>
#include <cstdlib>
#include <iostream>

//-----------------------------------------------------------
//! \brief       Class definition of NavStatus
//!
//! 
//!

class NavStatus : public QObject { 
    Q_OBJECT

public:
    //!constructor
    //!
    NavStatus();
    //!copy constructor
    //!
    NavStatus(const NavStatus&);
    //!= operator
    //!
    NavStatus & operator=(const NavStatus&/*val*/);
    //!              sets the Value: Navigation status of the target\n
    //!              								0 = under way using engine\n
    //!              								1 = at anchor\n
    //!              								2 = not under command\n
    //!              								3 = restricted manoeuvrability\n
    //!              								4 = constrained by her draught\n
    //!              								5 = moored\n
    //!              								6 = aground\n
    //!              								7 = engaged in fishing\n
    //!              								8 = under way sailing\n
    //!              								9 = engaged in fishing other than trawling  \n
    //!              								10 = air-cushion vessel in non displacement mode or WIG craft taking off, landing or in flight\n
    //!              								11 = power driven vessel towing astern\n
    //!              								12 = power driven vessel pushing ahead or towing alongside\n
    //!              								13 = in distress or requiring assistance  \n
    //!              								14 = AIS SART, seeking to attract attention\n
    //!              								15 = undefined default
    //!
    bool setValue(int val);

    //!              gets the Value: Navigation status of the target\n
    //!              								0 = under way using engine\n
    //!              								1 = at anchor\n
    //!              								2 = not under command\n
    //!              								3 = restricted manoeuvrability\n
    //!              								4 = constrained by her draught\n
    //!              								5 = moored\n
    //!              								6 = aground\n
    //!              								7 = engaged in fishing\n
    //!              								8 = under way sailing\n
    //!              								9 = engaged in fishing other than trawling  \n
    //!              								10 = air-cushion vessel in non displacement mode or WIG craft taking off, landing or in flight\n
    //!              								11 = power driven vessel towing astern\n
    //!              								12 = power driven vessel pushing ahead or towing alongside\n
    //!              								13 = in distress or requiring assistance  \n
    //!              								14 = AIS SART, seeking to attract attention\n
    //!              								15 = undefined default
    //!
    //! \return     int
    //!
    int getValue() const;

    //!              generates XML of this object including attributes and child elements
    //!              returns NULL if not all required elements are available
    //!
    //! \return     QString
    QString toXML() const;

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString();

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead);

    //!              encodes a string returning the encoded string
    //!
    //! \return     QString
    QString encode(QString str) const;


private:
    int m_value;
    bool m_valuePresent;

}; 

#endif

