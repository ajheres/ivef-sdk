/* 
 *  Identifier
 *
 *  Identifier is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Wed Jan 6 14:24:35 2010.
 **********************************************************************************
 *  Copyright 2008
 *
 */

package ivef;

import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import ivef.OtherId;
import ivef.OtherName;

public class Identifier { 

    private Vector<OtherId> m_otherIds = new Vector<OtherId>();
    private Vector<OtherName> m_otherNames = new Vector<OtherName>();
    private String m_callsign; // default value is uninitialized
    private boolean m_callsignPresent;
    private int m_IMO; // default value is uninitialized
    private boolean m_IMOPresent;
    private String m_name; // default value is uninitialized
    private boolean m_namePresent;
    private int m_MMSI; // default value is uninitialized
    private boolean m_MMSIPresent;
    private String m_LRIT; // default value is uninitialized
    private boolean m_LRITPresent;

    public Identifier() {

        m_callsignPresent = false;
        m_IMOPresent = false;
        m_namePresent = false;
        m_MMSIPresent = false;
        m_LRITPresent = false;
    }

    public Identifier(Identifier val) {

        for(int i=0; i < val.countOfOtherIds(); i++ ) {
            m_otherIds.add( val.getOtherIdAt(i) );
        }
        for(int i=0; i < val.countOfOtherNames(); i++ ) {
            m_otherNames.add( val.getOtherNameAt(i) );
        }
        m_callsignPresent = val.hasCallsign();
        m_callsign = val.getCallsign();
        m_IMOPresent = val.hasIMO();
        m_IMO = val.getIMO();
        m_namePresent = val.hasName();
        m_name = val.getName();
        m_MMSIPresent = val.hasMMSI();
        m_MMSI = val.getMMSI();
        m_LRITPresent = val.hasLRIT();
        m_LRIT = val.getLRIT();
    }

    public void addOtherId(OtherId val) {

        m_otherIds.add(val);
    }

    public OtherId getOtherIdAt(int i) {

        return (OtherId) m_otherIds.get(i);
    }

    public int countOfOtherIds() {

        return m_otherIds.size();
    }

    public void addOtherName(OtherName val) {

        m_otherNames.add(val);
    }

    public OtherName getOtherNameAt(int i) {

        return (OtherName) m_otherNames.get(i);
    }

    public int countOfOtherNames() {

        return m_otherNames.size();
    }

    public void setCallsign(String val) {

        m_callsignPresent = true;
        m_callsign = val;
    }

    public String getCallsign() {

        return m_callsign;
    }

    public boolean hasCallsign() {

        return m_callsignPresent;
    }

    public void setIMO(int val) {

        m_IMOPresent = true;
        m_IMO = val;
    }

    public int getIMO() {

        return m_IMO;
    }

    public boolean hasIMO() {

        return m_IMOPresent;
    }

    public void setName(String val) {

        m_namePresent = true;
        m_name = val;
    }

    public String getName() {

        return m_name;
    }

    public boolean hasName() {

        return m_namePresent;
    }

    public void setMMSI(int val) {

        m_MMSIPresent = true;
        m_MMSI = val;
    }

    public int getMMSI() {

        return m_MMSI;
    }

    public boolean hasMMSI() {

        return m_MMSIPresent;
    }

    public void setLRIT(String val) {

        m_LRITPresent = true;
        m_LRIT = val;
    }

    public String getLRIT() {

        return m_LRIT;
    }

    public boolean hasLRIT() {

        return m_LRITPresent;
    }

    public String toXML() {

        String xml = "<Identifier";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSSZ");

        if ( hasCallsign() ) {
            xml += " Callsign=\"" + encode( m_callsign) + "\"";
        }
        if ( hasIMO() ) {
            xml += " IMO=\"" + m_IMO + "\"";
        }
        if ( hasName() ) {
            xml += " Name=\"" + encode( m_name) + "\"";
        }
        if ( hasMMSI() ) {
            xml += " MMSI=\"" + m_MMSI + "\"";
        }
        if ( hasLRIT() ) {
            xml += " LRIT=\"" + encode( m_LRIT) + "\"";
        }
        xml += ">\n";
        for(int i=0; i < m_otherIds.size(); i++ ) {
           OtherId attribute = (OtherId) m_otherIds.get(i);
            xml += attribute.toXML();
        }
        for(int i=0; i < m_otherNames.size(); i++ ) {
           OtherName attribute = (OtherName) m_otherNames.get(i);
            xml += attribute.toXML();
        }
        xml += "</Identifier>\n";
        return xml;
    }

    public String toString(String lead) {

        String str = lead + "Identifier\n";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSSZ");

        if ( hasCallsign() ) {
            str +=  lead + "    Callsign = " + m_callsign + "\n";
        }
        if ( hasIMO() ) {
            str +=  lead + "    IMO = " + m_IMO + "\n";
        }
        if ( hasName() ) {
            str +=  lead + "    Name = " + m_name + "\n";
        }
        if ( hasMMSI() ) {
            str +=  lead + "    MMSI = " + m_MMSI + "\n";
        }
        if ( hasLRIT() ) {
            str +=  lead + "    LRIT = " + m_LRIT + "\n";
        }
        for(int i=0; i < m_otherIds.size(); i++ ) {
           OtherId attribute = (OtherId) m_otherIds.get(i);
           str += attribute.toString(lead + "    ");
        }
        for(int i=0; i < m_otherNames.size(); i++ ) {
           OtherName attribute = (OtherName) m_otherNames.get(i);
           str += attribute.toString(lead + "    ");
        }
        return str;
    }
    public String encode( String str) {

        str = str.replaceAll("&", "&amp;");
        str = str.replaceAll("<", "&lt;");
        str = str.replaceAll(">", "&gt;");
        str = str.replaceAll("\"", "&quot;");
        return str;
    }


}
