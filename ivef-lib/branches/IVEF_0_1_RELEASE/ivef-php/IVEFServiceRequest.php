<?php

// 
//  ServiceRequest
//
//  ServiceRequest is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  ServiceRequest is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by xsd2code on Fri May 28 20:19:56 2010.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFArea.php";
require_once "IVEFTransmission.php";
require_once "IVEFItem.php";
require_once "IVEFObject.php";

class ServiceRequest { 

    var $m_area; // default value is uninitialized
    var $m_areaPresent;
    var $m_transmission; // default value is uninitialized
    var $m_transmissionPresent;
    var $m_item; // default value is uninitialized
    var $m_itemPresent;
    var $m_object; // default value is uninitialized
    var $m_objectPresent;

    public function ServiceRequest() {

        date_default_timezone_set('UTC');
        $this->m_areaPresent = false;
        $this->m_areas = array();
        $this->m_transmissionPresent = false;
        $this->m_transmission = new Transmission();
        $this->m_itemPresent = false;
        $this->m_items = array();
        $this->m_objectPresent = false;
        $this->m_objects = array();
    }

    public function addArea(Area $val ) {

        $this->m_areas[] = $val;
        return true;
    }

    public function getAreaAt($i) {

        return $this->m_areas[$i];
    }

    public function countOfAreas() {

        return count($this->m_areas);
    }

    public function setTransmission( $val ) {

        $this->m_transmissionPresent = true;
        $this->m_transmission = $val;
        return true;
    }

    public function getTransmission() {

        return $this->m_transmission;
    }

    public function addItem(Item $val ) {

        $this->m_items[] = $val;
        return true;
    }

    public function getItemAt($i) {

        return $this->m_items[$i];
    }

    public function countOfItems() {

        return count($this->m_items);
    }

    public function addObject(Object $val ) {

        $this->m_objects[] = $val;
        return true;
    }

    public function getObjectAt($i) {

        return $this->m_objects[$i];
    }

    public function countOfObjects() {

        return count($this->m_objects);
    }

    public function toXML() {

        $xml = new SimpleXMLElement("<ServiceRequest></ServiceRequest>");

        if ( count($this->m_areas) < 0) {
            return ""; // not enough values
        }
        if ( count($this->m_areas) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_areas as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML();
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        if ( $this->m_transmissionPresent ) {
            $dom = dom_import_simplexml($xml);
            $child_as_xml = $this->m_transmission->toXML();
            $child_as_simplexml = new SimpleXMLElement($child_as_xml);
            $child_as_dom = dom_import_simplexml($child_as_simplexml);
            $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
            $dom->appendChild($child_as_leaf);
            $xml = simplexml_import_dom($dom);
        } else { 
            return ""; // not all required data members have been set 
        } 
        foreach($this->m_items as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML();
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        foreach($this->m_objects as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML();
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "ServiceRequest\n";

        foreach($this->m_areas as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }
        $str .=  $this->m_transmission->toStringWithLead($lead . "    ");
        foreach($this->m_items as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }
        foreach($this->m_objects as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }

        return $str;
    }
}
?>
