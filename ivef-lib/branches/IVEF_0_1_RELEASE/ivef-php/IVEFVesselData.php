<?php

// 
//  VesselData
//
//  VesselData is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  VesselData is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY ); without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//*********************************************************************************
//  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
//  Generated by xsd2code on Thu Aug 26 11:23:11 2010.
//*********************************************************************************
//  Copyright 2010
//

require_once "IVEFPosReport.php";
require_once "IVEFStaticData.php";
require_once "IVEFVoyage.php";
require_once "IVEFTaggedItem.php";

class VesselData { 

    var $m_posReport; // default value is uninitialized
    var $m_posReportPresent;
    var $m_staticData; // default value is uninitialized
    var $m_staticDataPresent;
    var $m_voyage; // default value is uninitialized
    var $m_voyagePresent;
    var $m_taggedItem; // default value is uninitialized
    var $m_taggedItemPresent;

    public function VesselData() {

        date_default_timezone_set('UTC');
        $this->m_posReportPresent = false;
        $this->m_posReport = new PosReport();
        $this->m_staticDataPresent = false;
        $this->m_staticDatas = array();
        $this->m_voyagePresent = false;
        $this->m_voyages = array();
        $this->m_taggedItemPresent = false;
        $this->m_taggedItems = array();
    }

    public function setPosReport( $val ) {

        $this->m_posReportPresent = true;
        $this->m_posReport = $val;
        return true;
    }

    public function getPosReport() {

        return $this->m_posReport;
    }

    public function hasPosReport() {

        return $this->m_posReportPresent;
    }

    public function removeStaticData(StaticData $val ) {
          for($i=0; $i< count($this->m_staticDatas); $i++) {
             if($this->m_staticDatas[i] == $val) {
                 unset($this->m_staticDatas[i]);
             }
          }
        return true;
    }

    public function addStaticData(StaticData $val ) {

        $this->m_staticDatas[] = $val;
        return true;
    }

    public function getStaticDataAt($i) {

        return $this->m_staticDatas[$i];
    }

    public function countOfStaticDatas() {

        return count($this->m_staticDatas);
    }

    public function removeVoyage(Voyage $val ) {
          for($i=0; $i< count($this->m_voyages); $i++) {
             if($this->m_voyages[i] == $val) {
                 unset($this->m_voyages[i]);
             }
          }
        return true;
    }

    public function addVoyage(Voyage $val ) {

        $this->m_voyages[] = $val;
        return true;
    }

    public function getVoyageAt($i) {

        return $this->m_voyages[$i];
    }

    public function countOfVoyages() {

        return count($this->m_voyages);
    }

    public function removeTaggedItem(TaggedItem $val ) {
          for($i=0; $i< count($this->m_taggedItems); $i++) {
             if($this->m_taggedItems[i] == $val) {
                 unset($this->m_taggedItems[i]);
             }
          }
        return true;
    }

    public function addTaggedItem(TaggedItem $val ) {

        $this->m_taggedItems[] = $val;
        return true;
    }

    public function getTaggedItemAt($i) {

        return $this->m_taggedItems[$i];
    }

    public function countOfTaggedItems() {

        return count($this->m_taggedItems);
    }

    public function toXML() {

        $xml = new SimpleXMLElement("<VesselData></VesselData>");

        if ( $this->hasPosReport() ) {
            $dom = dom_import_simplexml($xml);
            $child_as_xml = $this->m_posReport->toXML();
            $child_as_simplexml = new SimpleXMLElement($child_as_xml);
            $child_as_dom = dom_import_simplexml($child_as_simplexml);
            $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
            $dom->appendChild($child_as_leaf);
            $xml = simplexml_import_dom($dom);
        } 
        if ( count($this->m_staticDatas) < 0) {
            return ""; // not enough values
        }
        if ( count($this->m_staticDatas) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_staticDatas as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML();
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        if ( count($this->m_voyages) < 0) {
            return ""; // not enough values
        }
        if ( count($this->m_voyages) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_voyages as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML();
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        if ( count($this->m_taggedItems) < 0) {
            return ""; // not enough values
        }
        if ( count($this->m_taggedItems) < 0) {
            return ""; // not enough values
        }
        foreach($this->m_taggedItems as $attribute) {
        $dom = dom_import_simplexml($xml);
        $child_as_xml = $attribute->toXML();
        $child_as_simplexml = new SimpleXMLElement($child_as_xml);
        $child_as_dom = dom_import_simplexml($child_as_simplexml);
        $child_as_leaf = $dom->ownerDocument->importNode($child_as_dom, true);
        $dom->appendChild($child_as_leaf);
        $xml = simplexml_import_dom($dom);
        } 
        return $xml->asXML();
    }

    public function toString() {

    	return $this->toStringWithLead("");
    }

    public function toStringWithLead( $lead ) {

        $str = $lead . "VesselData\n";

        if ( $this->hasPosReport() ) {
            $str .=  $this->m_posReport->toStringWithLead($lead . "    ") ;
        }
        foreach($this->m_staticDatas as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }
        foreach($this->m_voyages as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }
        foreach($this->m_taggedItems as $attribute) {
           $str .= $attribute->toStringWithLead($lead . "    ");
        }

        return $str;
    }
}
?>
