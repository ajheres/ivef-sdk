/* 
 *  Parser
 *
 *  Parser is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Mon Apr 26 16:22:01 2010.
 **********************************************************************************
 *  Copyright 2010
 *
 */

package ivef;

import ivef.ParserListener;
import java.util.*;
import java.util.regex.*;
import java.text.DateFormat;
import java.io.*;
import java.text.SimpleDateFormat;
import javax.xml.parsers.*;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
import ivef.MSG_LoginRequest;
import ivef.Body;
import ivef.MSG_LoginResponse;
import ivef.MSG_Logout;
import ivef.Logout;
import ivef.MSG_Ping;
import ivef.MSG_Pong;
import ivef.MSG_ServerStatus;
import ivef.MSG_ServiceRequest;
import ivef.MSG_VesselData;
import ivef.Header;
import ivef.LoginRequest;
import ivef.LoginResponse;
import ivef.Ping;
import ivef.Pong;
import ivef.Pos;
import ivef.PosReport;
import ivef.Sensor;
import ivef.StaticData;
import ivef.ServerStatus;
import ivef.TaggedItem;
import ivef.ServiceRequest;
import ivef.Area;
import ivef.Transmission;
import ivef.Item;
import ivef.Object;
import ivef.VesselData;
import ivef.Voyage;

public class Parser extends DefaultHandler { 

    private String m_dataBuffer = new String();
    private ParserListener m_handler =  null;
    private Stack m_objStack = new Stack(); // cannot use a template since it stores different Objects
    private SAXParser m_parser; // init in constructor
    private Pattern m_closeTagsPattern; 

    public Parser(ParserListener handler) {

        m_handler = handler;

        // set the parser
        SAXParserFactory factory = SAXParserFactory.newInstance();
        m_closeTagsPattern = Pattern.compile( "</MSG_([A-Za-z0-9]*)>");
        try { 
            m_parser = factory.newSAXParser();
        } catch(Exception e) {
            e.printStackTrace();
        }
}

    public void startElement(String namespaceUri,
                             String localName,
                             String qName,
                             Attributes atts) throws SAXException {

    // check all possible options
    if (qName == "MSG_LoginRequest") {
        MSG_LoginRequest obj = new MSG_LoginRequest();
        m_objStack.push( obj );
    }
    else if (qName == "Body") {
        Body obj = new Body();
        m_objStack.push( obj );
    }
    else if (qName == "MSG_LoginResponse") {
        MSG_LoginResponse obj = new MSG_LoginResponse();
        m_objStack.push( obj );
    }
    else if (qName == "MSG_Logout") {
        MSG_Logout obj = new MSG_Logout();
        m_objStack.push( obj );
    }
    else if (qName == "Logout") {
        Logout obj = new Logout();
        m_objStack.push( obj );
    }
    else if (qName == "MSG_Ping") {
        MSG_Ping obj = new MSG_Ping();
        m_objStack.push( obj );
    }
    else if (qName == "MSG_Pong") {
        MSG_Pong obj = new MSG_Pong();
        m_objStack.push( obj );
    }
    else if (qName == "MSG_ServerStatus") {
        MSG_ServerStatus obj = new MSG_ServerStatus();
        m_objStack.push( obj );
    }
    else if (qName == "MSG_ServiceRequest") {
        MSG_ServiceRequest obj = new MSG_ServiceRequest();
        m_objStack.push( obj );
    }
    else if (qName == "MSG_VesselData") {
        MSG_VesselData obj = new MSG_VesselData();
        m_objStack.push( obj );
    }
    else if (qName == "Header") {
        Header obj = new Header();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Version") {
                String val = value;
                if (! obj.setVersion(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "MsgRefId") {
                String val = value;
                if (! obj.setMsgRefId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "LoginRequest") {
        LoginRequest obj = new LoginRequest();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Name") {
                String val = value;
                if (! obj.setName(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Password") {
                String val = value;
                if (! obj.setPassword(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Encryption") {
                int val = Integer.parseInt(value);
                if (! obj.setEncryption(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "LoginResponse") {
        LoginResponse obj = new LoginResponse();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "MsgId") {
                String val = value;
                if (! obj.setMsgId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Result") {
                int val = Integer.parseInt(value);
                if (! obj.setResult(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Reason") {
                String val = value;
                if (! obj.setReason(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Ping") {
        Ping obj = new Ping();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "TimeStamp") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setTimeStamp(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Pong") {
        Pong obj = new Pong();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "TimeStamp") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setTimeStamp(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "MsgId") {
                String val = value;
                if (! obj.setMsgId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "SourceId") {
                int val = Integer.parseInt(value);
                if (! obj.setSourceId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Pos") {
        Pos obj = new Pos();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Lat") {
                double val = Double.parseDouble(value);
                if (! obj.setLat(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Long") {
                double val = Double.parseDouble(value);
                if (! obj.setLong(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "PosReport") {
        PosReport obj = new PosReport();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Id") {
                int val = Integer.parseInt(value);
                if (! obj.setId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "SourceId") {
                int val = Integer.parseInt(value);
                if (! obj.setSourceId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "UpdateTime") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setUpdateTime(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "UpdateTimeRadar") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setUpdateTimeRadar(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "UpdateTimeAIS") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setUpdateTimeAIS(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "UpdateTimeDR") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setUpdateTimeDR(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "SOG") {
                double val = Double.parseDouble(value);
                if (! obj.setSOG(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "COG") {
                double val = Double.parseDouble(value);
                if (! obj.setCOG(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Lost") {
                String val = value;
                if (! obj.setLost(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "RateOfTurn") {
                double val = Double.parseDouble(value);
                if (! obj.setRateOfTurn(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Orientation") {
                double val = Double.parseDouble(value);
                if (! obj.setOrientation(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Length") {
                double val = Double.parseDouble(value);
                if (! obj.setLength(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Breadth") {
                double val = Double.parseDouble(value);
                if (! obj.setBreadth(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Altitude") {
                double val = Double.parseDouble(value);
                if (! obj.setAltitude(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "NavStatus") {
                int val = Integer.parseInt(value);
                if (! obj.setNavStatus(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "UpdSensorType") {
                int val = Integer.parseInt(value);
                if (! obj.setUpdSensorType(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ATONOffPos") {
                boolean val = (value.toUpperCase().equals("YES") ||
                               value.toUpperCase().equals("TRUE") ||
                               value.toUpperCase().equals("1"));
                if (! obj.setATONOffPos(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Sensor") {
        Sensor obj = new Sensor();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "SenId") {
                int val = Integer.parseInt(value);
                if (! obj.setSenId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "TrkId") {
                int val = Integer.parseInt(value);
                if (! obj.setTrkId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "StaticData") {
        StaticData obj = new StaticData();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Id") {
                String val = value;
                if (! obj.setId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "SourceName") {
                String val = value;
                if (! obj.setSourceName(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Source") {
                int val = Integer.parseInt(value);
                if (! obj.setSource(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Length") {
                double val = Double.parseDouble(value);
                if (! obj.setLength(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Breadth") {
                double val = Double.parseDouble(value);
                if (! obj.setBreadth(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Callsign") {
                String val = value;
                if (! obj.setCallsign(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ShipName") {
                String val = value;
                if (! obj.setShipName(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ObjectType") {
                int val = Integer.parseInt(value);
                if (! obj.setObjectType(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ShipType") {
                int val = Integer.parseInt(value);
                if (! obj.setShipType(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "IMO") {
                int val = Integer.parseInt(value);
                if (! obj.setIMO(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "MMSI") {
                int val = Integer.parseInt(value);
                if (! obj.setMMSI(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ATONType") {
                int val = Integer.parseInt(value);
                if (! obj.setATONType(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ATONName") {
                String val = value;
                if (! obj.setATONName(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "AntPosDistFromFront") {
                double val = Double.parseDouble(value);
                if (! obj.setAntPosDistFromFront(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "AntPosDistFromLeft") {
                double val = Double.parseDouble(value);
                if (! obj.setAntPosDistFromLeft(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "NatLangShipName") {
                String val = value;
                if (! obj.setNatLangShipName(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "PortOfRegistry") {
                String val = value;
                if (! obj.setPortOfRegistry(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "CountryFlag") {
                String val = value;
                if (! obj.setCountryFlag(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "MaxAirDraught") {
                double val = Double.parseDouble(value);
                if (! obj.setMaxAirDraught(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "MaxDraught") {
                double val = Double.parseDouble(value);
                if (! obj.setMaxDraught(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "DeepWaterVesselind") {
                String val = value;
                if (! obj.setDeepWaterVesselind(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "ServerStatus") {
        ServerStatus obj = new ServerStatus();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Status") {
                String val = value;
                if (! obj.setStatus(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Details") {
                String val = value;
                if (! obj.setDetails(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "TaggedItem") {
        TaggedItem obj = new TaggedItem();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Key") {
                String val = value;
                if (! obj.setKey(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Value") {
                String val = value;
                if (! obj.setValue(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "ServiceRequest") {
        ServiceRequest obj = new ServiceRequest();
        m_objStack.push( obj );
    }
    else if (qName == "Area") {
        Area obj = new Area();
        m_objStack.push( obj );
    }
    else if (qName == "Transmission") {
        Transmission obj = new Transmission();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Type") {
                int val = Integer.parseInt(value);
                if (! obj.setType(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Period") {
                double val = Double.parseDouble(value);
                if (! obj.setPeriod(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Item") {
        Item obj = new Item();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Element") {
                int val = Integer.parseInt(value);
                if (! obj.setElement(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Field") {
                String val = value;
                if (! obj.setField(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Object") {
        Object obj = new Object();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "FileName") {
                String val = value;
                if (! obj.setFileName(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "VesselData") {
        VesselData obj = new VesselData();
        m_objStack.push( obj );
    }
    else if (qName == "Voyage") {
        Voyage obj = new Voyage();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Id") {
                String val = value;
                if (! obj.setId(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "SourceName") {
                String val = value;
                if (! obj.setSourceName(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Source") {
                int val = Integer.parseInt(value);
                if (! obj.setSource(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "CargoType") {
                int val = Integer.parseInt(value);
                if (! obj.setCargoType(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Destination") {
                String val = value;
                if (! obj.setDestination(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ETA") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setETA(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "ATA") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                if (! obj.setATA(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "PersonsOnBoard") {
                int val = Integer.parseInt(value);
                if (! obj.setPersonsOnBoard(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "AirDraught") {
                double val = Double.parseDouble(value);
                if (! obj.setAirDraught(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
            else if (key == "Draught") {
                double val = Double.parseDouble(value);
                if (! obj.setDraught(val) ) {
                   throw new SAXException("Validation Exception: " + key + " = " + value );
                }
            }
        }
        m_objStack.push( obj );
    }
}

    public void endElement(String namespaceUri,
                           String localName,
                           String qName) throws SAXException {

    // check all possible options
    if (qName == "MSG_LoginRequest") {

        MSG_LoginRequest obj = (MSG_LoginRequest) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_LoginRequest( obj ); 
    }
    else if (qName == "Body") {

        Body obj = (Body) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new MSG_LoginRequest().getClass() ) {
                if (! ((MSG_LoginRequest) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_LoginResponse().getClass() ) {
                if (! ((MSG_LoginResponse) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_Logout().getClass() ) {
                if (! ((MSG_Logout) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_Ping().getClass() ) {
                if (! ((MSG_Ping) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_Pong().getClass() ) {
                if (! ((MSG_Pong) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_ServerStatus().getClass() ) {
                if (! ((MSG_ServerStatus) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_ServiceRequest().getClass() ) {
                if (! ((MSG_ServiceRequest) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_VesselData().getClass() ) {
                if (! ((MSG_VesselData) ( m_objStack.peek() ) ).setBody( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "MSG_LoginResponse") {

        MSG_LoginResponse obj = (MSG_LoginResponse) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_LoginResponse( obj ); 
    }
    else if (qName == "MSG_Logout") {

        MSG_Logout obj = (MSG_Logout) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_Logout( obj ); 
    }
    else if (qName == "Logout") {

        Logout obj = (Logout) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).setLogout( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "MSG_Ping") {

        MSG_Ping obj = (MSG_Ping) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_Ping( obj ); 
    }
    else if (qName == "MSG_Pong") {

        MSG_Pong obj = (MSG_Pong) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_Pong( obj ); 
    }
    else if (qName == "MSG_ServerStatus") {

        MSG_ServerStatus obj = (MSG_ServerStatus) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_ServerStatus( obj ); 
    }
    else if (qName == "MSG_ServiceRequest") {

        MSG_ServiceRequest obj = (MSG_ServiceRequest) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_ServiceRequest( obj ); 
    }
    else if (qName == "MSG_VesselData") {

        MSG_VesselData obj = (MSG_VesselData) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_VesselData( obj ); 
    }
    else if (qName == "Header") {

        Header obj = (Header) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new MSG_LoginRequest().getClass() ) {
                if (! ((MSG_LoginRequest) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_LoginResponse().getClass() ) {
                if (! ((MSG_LoginResponse) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_Logout().getClass() ) {
                if (! ((MSG_Logout) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_Ping().getClass() ) {
                if (! ((MSG_Ping) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_Pong().getClass() ) {
                if (! ((MSG_Pong) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_ServerStatus().getClass() ) {
                if (! ((MSG_ServerStatus) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_ServiceRequest().getClass() ) {
                if (! ((MSG_ServiceRequest) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new MSG_VesselData().getClass() ) {
                if (! ((MSG_VesselData) ( m_objStack.peek() ) ).setHeader( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "LoginRequest") {

        LoginRequest obj = (LoginRequest) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).setLoginRequest( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "LoginResponse") {

        LoginResponse obj = (LoginResponse) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).setLoginResponse( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Ping") {

        Ping obj = (Ping) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).setPing( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Pong") {

        Pong obj = (Pong) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).setPong( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Pos") {

        Pos obj = (Pos) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new PosReport().getClass() ) {
                if (! ((PosReport) ( m_objStack.peek() ) ).setPos( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
        if ( m_objStack.peek().getClass() == new Area().getClass() ) {
                if (! ((Area) ( m_objStack.peek() ) ).addPos( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "PosReport") {

        PosReport obj = (PosReport) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new VesselData().getClass() ) {
                if (! ((VesselData) ( m_objStack.peek() ) ).setPosReport( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Sensor") {

        Sensor obj = (Sensor) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new PosReport().getClass() ) {
                if (! ((PosReport) ( m_objStack.peek() ) ).addSensor( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "StaticData") {

        StaticData obj = (StaticData) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new VesselData().getClass() ) {
                if (! ((VesselData) ( m_objStack.peek() ) ).addStaticData( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "ServerStatus") {

        ServerStatus obj = (ServerStatus) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).setServerStatus( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "TaggedItem") {

        TaggedItem obj = (TaggedItem) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new VesselData().getClass() ) {
                if (! ((VesselData) ( m_objStack.peek() ) ).addTaggedItem( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "ServiceRequest") {

        ServiceRequest obj = (ServiceRequest) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).setServiceRequest( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Area") {

        Area obj = (Area) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                if (! ((ServiceRequest) ( m_objStack.peek() ) ).addArea( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Transmission") {

        Transmission obj = (Transmission) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                if (! ((ServiceRequest) ( m_objStack.peek() ) ).setTransmission( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Item") {

        Item obj = (Item) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                if (! ((ServiceRequest) ( m_objStack.peek() ) ).addItem( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Object") {

        Object obj = (Object) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                if (! ((ServiceRequest) ( m_objStack.peek() ) ).addObject( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "VesselData") {

        VesselData obj = (VesselData) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                if (! ((Body) ( m_objStack.peek() ) ).addVesselData( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
    else if (qName == "Voyage") {

        Voyage obj = (Voyage) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new VesselData().getClass() ) {
                if (! ((VesselData) ( m_objStack.peek() ) ).addVoyage( obj ) ) {
                   throw new SAXException("Validation Exception: " + qName);
                }
        }
    }
}

    public boolean parseXMLString(String data, boolean cont) { 

     m_dataBuffer += data;


     // search the buffer for the nearest closetag
     int indexStart = 0, indexEnd = -1;

     // look for the pattern that defines a root element
     Matcher matcher = m_closeTagsPattern.matcher( m_dataBuffer );

     // parse the messages in the buffer one by one
     while ( matcher.find() ) {
         indexEnd = matcher.end();
         // isolate the messages
         String messages = m_dataBuffer.substring(indexStart, indexEnd);
         indexStart = indexEnd;
         // and parse
         try { 
             m_parser.parse(new InputSource(new StringReader(messages)), this);
         } catch(Exception e) {
             String errorMessage =
             "Error parsing " + messages + ": " + e;
             System.err.println(errorMessage);
             e.printStackTrace();
             return false;
         }
     }

     // check if we parsed messages
     if (indexEnd > -1) {
         // remove from buffer
         m_dataBuffer = m_dataBuffer.substring(indexEnd);
     }

     // check if we should flush the buffer
     if (!cont) {
         m_dataBuffer = "";
     }
     return true;
}


}
