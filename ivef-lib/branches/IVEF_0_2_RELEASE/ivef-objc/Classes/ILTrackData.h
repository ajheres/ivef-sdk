/* 
 *  ILTrackData
 *
 *  ILTrackData is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Thu Apr 22 11:27:24 2010.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#import <Foundation/Foundation.h>
#import "ILPos.h"

//-----------------------------------------------------------
//! \brief       Class definition of ILTrackData
//!
//! DATA describing a position report of an object
//!

@interface ILTrackData : NSObject { 
    NSMutableArray *m_poss;
    float m_COG;
    float m_estAccSOG;
    bool m_estAccSOGPresent;
    float m_estAccCOG;
    bool m_estAccCOGPresent;
    int m_id;
    float m_length;
    bool m_lengthPresent;
    int m_navStatus;
    bool m_navStatusPresent;
    float m_heading;
    bool m_headingPresent;
    float m_ROT;
    bool m_ROTPresent;
    float m_SOG;
    NSString *m_sourceId;
    bool m_sourceIdPresent;
    NSString *m_sourceName;
    NSDate *m_updateTime;
    int m_trackStatus;
    float m_width;
    bool m_widthPresent;
}

//!Setter for Pos
//!
-(void) addPos:(ILPos *) val;
//!Getter for Pos
//!
-(ILPos *) posAt:(int) i;
//!Element counter for Pos
//!
-(int) countOfPoss;
//!Get all elements for Pos
//!
-(NSArray *) poss;

/* COG:
   Course over ground  in degrees. (0-360) */
//!Setter for COG
//!
-(void) setCOG:(float) val;
//!Getter for COG
//!
-(float) COG;

/* EstAccSOG:
   Estimated accuracy
   standard deviation of the calculated value 
   expressed in m/s */
//!Setter for EstAccSOG
//!
-(void) setEstAccSOG:(float) val;
//!Getter for EstAccSOG
//!
-(float) estAccSOG;
//!Test for pressence of EstAccSOG
//!
-(bool) hasEstAccSOG;

/* EstAccCOG:
   Estimated accuracy
   standard deviation of the calculated value 
   expressed in degrees */
//!Setter for EstAccCOG
//!
-(void) setEstAccCOG:(float) val;
//!Getter for EstAccCOG
//!
-(float) estAccCOG;
//!Test for pressence of EstAccCOG
//!
-(bool) hasEstAccCOG;

/* Id:
   The unique identification of this track. Valid from first message with TrackStatus!=Terminated to first message with TrackStatus=Terminated */
//!Setter for Id
//!
-(void) setIdent:(int) val;
//!Getter for Id
//!
-(int) ident;

/* Length:
   Measured length of the target in meter */
//!Setter for Length
//!
-(void) setLength:(float) val;
//!Getter for Length
//!
-(float) length;
//!Test for pressence of Length
//!
-(bool) hasLength;

/* NavStatus:
   Navigation status of the target
   0 = under way using engine
   1 = at anchor
   2 = not under command
   3 = restricted manoeuvrability
   4 = constrained by her draught
   5 = moored
   6 = aground
   7 = engaged in fishing
   8 = under way sailing
   9 = engaged in fishing other than trawling  
   10 = air-cushion vessel in non displacement mode or WIG craft taking off, landing or in flight
   11 = power driven vessel towing astern
   12 = power driven vessel pushing ahead or towing alongside
   13 = in distress or requiring assistance  
   14 = AIS SART, seeking to attract attention
   15 = undefined default */
//!Setter for NavStatus
//!
-(void) setNavStatus:(int) val;
//!Getter for NavStatus
//!
-(int) navStatus;
//!Test for pressence of NavStatus
//!
-(bool) hasNavStatus;

/* Heading:
   Heading of the target in degrees */
//!Setter for Heading
//!
-(void) setHeading:(float) val;
//!Getter for Heading
//!
-(float) heading;
//!Test for pressence of Heading
//!
-(bool) hasHeading;

/* ROT:
   Rate of turn in degrees per minute */
//!Setter for ROT
//!
-(void) setROT:(float) val;
//!Getter for ROT
//!
-(float) ROT;
//!Test for pressence of ROT
//!
-(bool) hasROT;

/* SOG:
   Speed over ground in meters per second */
//!Setter for SOG
//!
-(void) setSOG:(float) val;
//!Getter for SOG
//!
-(float) SOG;

/* SourceId:
   Unique identification of the producer  (UN/LOCODE)  in case multiple producers exist on the same LOCODE, the local competent authority can optionally addended this with a local  code (e.g. BE ANR 01 = Antwerp, 01) */
//!Setter for SourceId
//!
-(void) setSourceId:(NSString *) val;
//!Getter for SourceId
//!
-(NSString *) sourceId;
//!Test for pressence of SourceId
//!
-(bool) hasSourceId;

/* SourceName:
   Identification of the originator of the data */
//!Setter for SourceName
//!
-(void) setSourceName:(NSString *) val;
//!Getter for SourceName
//!
-(NSString *) sourceName;

/* UpdateTime:
   Date and time in UTC format (YYYY-MM-DDThh:mm:ss.sssZ) (subset of ISO 8601)  this position was measured. */
//!Setter for UpdateTime
//!
-(void) setUpdateTime:(NSDate *) val;
//!Getter for UpdateTime
//!
-(NSDate *) updateTime;

/* TrackStatus:
   1 = Updated, (sensors are updating the track)
   2 = Coasted, (no sensor is updating the track)
   3 = Dropped */
//!Setter for TrackStatus
//!
-(void) setTrackStatus:(int) val;
//!Getter for TrackStatus
//!
-(int) trackStatus;

/* Width:
   Measured Width of the target in meter */
//!Setter for Width
//!
-(void) setWidth:(float) val;
//!Getter for Width
//!
-(float) width;
//!Test for pressence of Width
//!
-(bool) hasWidth;
//!Set attributes by providing a key/value dictionary
//!

-(void) setAttributes:(NSDictionary *)attributeDict;
//!Get attributes as a key/value dictionary
//!
-(NSDictionary *) attributes;
//!Get a XML representation of this class
//!
-(NSString *) XML;
//!Get a string representation of this class
//!
-(NSString *) stringValue;
-(NSString *) stringValueWithLead:(NSString *) lead;
//!Helper routine to encode any string to an XML escaped string
//!
-(NSString *) encode: (NSString *) input;

@end



