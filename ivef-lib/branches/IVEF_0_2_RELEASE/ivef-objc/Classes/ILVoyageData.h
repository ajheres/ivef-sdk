/* 
 *  ILVoyageData
 *
 *  ILVoyageData is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Tue Jan 5 23:01:06 2010.
 **********************************************************************************
 *  Copyright 2009
 *
 */

#import <Foundation/Foundation.h>
#import "ILWaypoint.h"

@interface ILVoyageData : NSObject { 
    NSMutableArray *m_waypoints;
    float m_airDraught;
    bool m_airDraughtPresent;
    int m_id;
    int m_cargoTypeIMO;
    bool m_cargoTypeIMOPresent;
    NSString *m_contactIdentity;
    bool m_contactIdentityPresent;
    NSString *m_destCode;
    bool m_destCodePresent;
    NSString *m_destName;
    bool m_destNamePresent;
    float m_draught;
    bool m_draughtPresent;
    NSDate *m_ETA;
    bool m_ETAPresent;
    float m_ISPSLevel;
    bool m_ISPSLevelPresent;
    float m_overSizedLength;
    bool m_overSizedLengthPresent;
    float m_overSizedWidth;
    bool m_overSizedWidthPresent;
    NSString *m_nextPort;
    bool m_nextPortPresent;
    float m_personsOnBoard;
    bool m_personsOnBoardPresent;
    float m_pilots;
    bool m_pilotsPresent;
    NSString *m_prevPort;
    bool m_prevPortPresent;
    bool m_routeBound;
    bool m_routeBoundPresent;
    NSString *m_sourceId;
    bool m_sourceIdPresent;
    NSString *m_sourceName;
    int m_sourceType;
    int m_tankerStatus;
    bool m_tankerStatusPresent;
    bool m_tugs;
    bool m_tugsPresent;
    NSDate *m_updateTime;
}


/* Waypoint:
   Waypoint belonging to the route of this voyage */
-(void) addWaypoint:(ILWaypoint *) val;
-(ILWaypoint *) waypointAt:(int) i;
-(int) countOfWaypoints;
-(NSArray *) waypoints;

/* AirDraught:
   Actual air draught of the vessel in meters */
-(void) setAirDraught:(float) val;
-(float) airDraught;
-(bool) hasAirDraught;

/* Id:
   The unique identification of this voyagedata. Valid from first message with TrackStatus!=Terminated to first message with TrackStatus=Terminated */
-(void) setIdent:(int) val;
-(int) ident;

/* CargoTypeIMO:
   0 = All ships of this type
   1 = Carrying DG, HS, or MP, IMO hazard or pollutant category A
   2 = Carrying DG, HS, or MP, IMO hazard or pollutant category B
   3 = Carrying DG, HS, or MP, IMO hazard or pollutant category C
   4 = Carrying DG, HS, or MP, IMO hazard or pollutant category D
   5 = Carrying DG, HS, or MP, IMO hazard or pollutant of unknown category */
-(void) setCargoTypeIMO:(int) val;
-(int) cargoTypeIMO;
-(bool) hasCargoTypeIMO;

/* ContactIdentity:
   reference to the identity associated with this objects voyage */
-(void) setContactIdentity:(NSString *) val;
-(NSString *) contactIdentity;
-(bool) hasContactIdentity;

/* DestCode:
   Destination of the target (UN/LOCODE)  optionally addended with local location code (e.g. BEANR0170100497 = Antwerp, HANSADOK 497) */
-(void) setDestCode:(NSString *) val;
-(NSString *) destCode;
-(bool) hasDestCode;

/* DestName:
   Destination name of the target e.g. local code for berth/lock/bridge/terminal */
-(void) setDestName:(NSString *) val;
-(NSString *) destName;
-(bool) hasDestName;

/* Draught:
   Actual draught of the vessel in meters */
-(void) setDraught:(float) val;
-(float) draught;
-(bool) hasDraught;

/* ETA:
   Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ) of the Expected Time Of Arrival of the target at the destination */
-(void) setETA:(NSDate *) val;
-(NSDate *) ETA;
-(bool) hasETA;

/* ISPSLevel:
   The ISPS level of the object (1 = normal, 2 = heightended, 3 = exceptional) */
-(void) setISPSLevel:(float) val;
-(float) ISPSLevel;
-(bool) hasISPSLevel;

/* OverSizedLength:
   Length of the target in meter as confirmed by NCA, in case of a convoy of barges */
-(void) setOverSizedLength:(float) val;
-(float) overSizedLength;
-(bool) hasOverSizedLength;

/* OverSizedWidth:
   Width of the target in meter as confirmed by the NCA, in case of a convoy of barges */
-(void) setOverSizedWidth:(float) val;
-(float) overSizedWidth;
-(bool) hasOverSizedWidth;

/* NextPort:
   Next port of the target (UN/LOCODE) */
-(void) setNextPort:(NSString *) val;
-(NSString *) nextPort;
-(bool) hasNextPort;

/* PersonsOnBoard:
   The number of persons on board of the object, should equal the sum of crew, passengers and support personel if available */
-(void) setPersonsOnBoard:(float) val;
-(float) personsOnBoard;
-(bool) hasPersonsOnBoard;

/* Pilots:
   Pilot status
   0 = unknown
   1 = pilot on board
   2 = object under remote pilotage
   3 = pilot required */
-(void) setPilots:(float) val;
-(float) pilots;
-(bool) hasPilots;

/* PrevPort:
   Previous port of the target (UN/LOCODE) */
-(void) setPrevPort:(NSString *) val;
-(NSString *) prevPort;
-(bool) hasPrevPort;

/* RouteBound:
   This object is bound to the route of this voyage */
-(void) setRouteBound:(bool) val;
-(bool) routeBound;
-(bool) hasRouteBound;

/* SourceId:
   Unique identification of the producer  (UN/LOCODE)  in case multiple producers exist on the same LOCODE, the local competent authority can optionally addended this with a local  code (e.g. BE ANR 01 = Antwerp, 01) */
-(void) setSourceId:(NSString *) val;
-(NSString *) sourceId;
-(bool) hasSourceId;

/* SourceName:
   Identification of the originator of this data */
-(void) setSourceName:(NSString *) val;
-(NSString *) sourceName;

/* SourceType:
   Source/originator type: 0 = unknown, 1 = transponder, 2 = database, 3 = manual, 4 =  fused */
-(void) setSourceType:(int) val;
-(int) sourceType;

/* TankerStatus:
   Describes the status of the tanker
   0 = Non gas free
   1 = Gas free
   2 = Inert */
-(void) setTankerStatus:(int) val;
-(int) tankerStatus;
-(bool) hasTankerStatus;

/* Tugs:
   Object uses tugs */
-(void) setTugs:(bool) val;
-(bool) tugs;
-(bool) hasTugs;

/* UpdateTime:
   Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ)  this data was compiled */
-(void) setUpdateTime:(NSDate *) val;
-(NSDate *) updateTime;

-(void) setAttributes:(NSDictionary *)attributeDict;
-(NSDictionary *) attributes;
-(NSString *) XML;
-(NSString *) stringValue;
-(NSString *) stringValueWithLead:(NSString *) lead;
-(NSString *) encode: (NSString *) input;

@end



