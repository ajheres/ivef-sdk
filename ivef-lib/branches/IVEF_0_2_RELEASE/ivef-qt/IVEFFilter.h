/* 
 *  Filter
 *
 *  Filter is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Tue Jan 5 16:22:59 2010.
 **********************************************************************************
 *  Copyright 2009
 *
 */

#ifndef __FILTER_H__
#define __FILTER_H__

#include <QtCore>

//-----------------------------------------------------------
//! \brief       Class definition of Filter
//!
//! 
//!

class Filter : public QObject { 
    Q_OBJECT

public:
    //!constructor
    //!
    Filter();
    //!copy constructor
    //!
    Filter(const Filter&);
    //!= operator
    //!
    Filter & operator=(const Filter&/*val*/);
    //!              sets the Predicate: Filter expression in XPath 1.0 definition (http://www.w3.org/TR/1999/REC-xpath-19991116) \n
    //!              A Filter must start with //ObjectData (Filter always on entire objects) and can not go beyond a single objects parameters (next/previous/last etc.) \n
    //!              \n
    //!              Examples:\n
    //!              \n
    //!              All objects: //ObjectData\n
    //!              All objects faster then 10 m/s: //ObjectData[TrackData[@SOG > 10]]\n
    //!              All objects named "Krieken": //ObjectData[VesselData/Identifier[@Name = "Krieken"]]\n
    //!              All objects heading for Antwerp, HANSADOK 497 with a max keelheigth of 20m: //ObjectData[VoyageData[@DestCode = BEANR0170100497]]  AND //ObjectData[VesselData/Construction[@MaxKeelHeigth > 20]]
    //!
    void setPredicate(QString val);

    //!              gets the Predicate: Filter expression in XPath 1.0 definition (http://www.w3.org/TR/1999/REC-xpath-19991116) \n
    //!              A Filter must start with //ObjectData (Filter always on entire objects) and can not go beyond a single objects parameters (next/previous/last etc.) \n
    //!              \n
    //!              Examples:\n
    //!              \n
    //!              All objects: //ObjectData\n
    //!              All objects faster then 10 m/s: //ObjectData[TrackData[@SOG > 10]]\n
    //!              All objects named "Krieken": //ObjectData[VesselData/Identifier[@Name = "Krieken"]]\n
    //!              All objects heading for Antwerp, HANSADOK 497 with a max keelheigth of 20m: //ObjectData[VoyageData[@DestCode = BEANR0170100497]]  AND //ObjectData[VesselData/Construction[@MaxKeelHeigth > 20]]
    //!
    //! \return     QString
    //!
    QString getPredicate() const;

    //!              generates XML of this object including attributes and child elements
    //!
    //! \return     QString
    QString toXML();

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead);

    //!              encodes a string returning the encoded string
    //!
    //! \return     QString
    QString encode(QString str);


private:
    QString m_predicate;

}; 

#endif

