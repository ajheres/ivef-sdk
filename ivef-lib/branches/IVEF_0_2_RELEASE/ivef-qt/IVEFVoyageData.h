/* 
 *  VoyageData
 *
 *  VoyageData is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Wed Jan 6 14:24:27 2010.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __VOYAGEDATA_H__
#define __VOYAGEDATA_H__

#include <QtCore>
#include "IVEFWaypoint.h"

//-----------------------------------------------------------
//! \brief       Class definition of VoyageData
//!
//! DATA regarding a movement of a vessel servers domain
//!

class VoyageData : public QObject { 
    Q_OBJECT

public:
    //!constructor
    //!
    VoyageData();
    //!copy constructor
    //!
    VoyageData(const VoyageData&);
    //!= operator
    //!
    VoyageData & operator=(const VoyageData&/*val*/);
    //!              adds a Waypoint.
    //!
    void addWaypoint(Waypoint val);

    //!              gets the i-th Waypoint.
    //!
    Waypoint getWaypointAt(int i) const;

    //!              return the number of Waypoint objects.
    //!
    //! \return     int
    int countOfWaypoints() const;

    //!              sets the AirDraught: Actual air draught of the vessel in meters
    //!
    void setAirDraught(float val);

    //!              gets the AirDraught: Actual air draught of the vessel in meters
    //!
    //! \return     float
    //!
    float getAirDraught() const;

    //!              returns true if AirDraughtis used (optional field).
    //!
    //! \return     bool
    bool hasAirDraught();

    //!              sets the Id: The unique identification of this voyagedata. Valid from first message with TrackStatus!=Terminated to first message with TrackStatus=Terminated
    //!
    void setId(int val);

    //!              gets the Id: The unique identification of this voyagedata. Valid from first message with TrackStatus!=Terminated to first message with TrackStatus=Terminated
    //!
    //! \return     int
    //!
    int getId() const;

    //!              sets the CargoTypeIMO: 0 = All ships of this type\n
    //!              1 = Carrying DG, HS, or MP, IMO hazard or pollutant category A\n
    //!              2 = Carrying DG, HS, or MP, IMO hazard or pollutant category B\n
    //!              3 = Carrying DG, HS, or MP, IMO hazard or pollutant category C\n
    //!              4 = Carrying DG, HS, or MP, IMO hazard or pollutant category D\n
    //!              5 = Carrying DG, HS, or MP, IMO hazard or pollutant of unknown category
    //!
    void setCargoTypeIMO(int val);

    //!              gets the CargoTypeIMO: 0 = All ships of this type\n
    //!              1 = Carrying DG, HS, or MP, IMO hazard or pollutant category A\n
    //!              2 = Carrying DG, HS, or MP, IMO hazard or pollutant category B\n
    //!              3 = Carrying DG, HS, or MP, IMO hazard or pollutant category C\n
    //!              4 = Carrying DG, HS, or MP, IMO hazard or pollutant category D\n
    //!              5 = Carrying DG, HS, or MP, IMO hazard or pollutant of unknown category
    //!
    //! \return     int
    //!
    int getCargoTypeIMO() const;

    //!              returns true if CargoTypeIMOis used (optional field).
    //!
    //! \return     bool
    bool hasCargoTypeIMO();

    //!              sets the ContactIdentity: reference to the identity associated with this objects voyage
    //!
    void setContactIdentity(QString val);

    //!              gets the ContactIdentity: reference to the identity associated with this objects voyage
    //!
    //! \return     QString
    //!
    QString getContactIdentity() const;

    //!              returns true if ContactIdentityis used (optional field).
    //!
    //! \return     bool
    bool hasContactIdentity();

    //!              sets the DestCode: Destination of the target (UN/LOCODE)  optionally addended with local location code (e.g. BEANR0170100497 = Antwerp, HANSADOK 497)
    //!
    void setDestCode(QString val);

    //!              gets the DestCode: Destination of the target (UN/LOCODE)  optionally addended with local location code (e.g. BEANR0170100497 = Antwerp, HANSADOK 497)
    //!
    //! \return     QString
    //!
    QString getDestCode() const;

    //!              returns true if DestCodeis used (optional field).
    //!
    //! \return     bool
    bool hasDestCode();

    //!              sets the DestName: Destination name of the target e.g. local code for berth/lock/bridge/terminal
    //!
    void setDestName(QString val);

    //!              gets the DestName: Destination name of the target e.g. local code for berth/lock/bridge/terminal
    //!
    //! \return     QString
    //!
    QString getDestName() const;

    //!              returns true if DestNameis used (optional field).
    //!
    //! \return     bool
    bool hasDestName();

    //!              sets the Draught: Actual draught of the vessel in meters
    //!
    void setDraught(float val);

    //!              gets the Draught: Actual draught of the vessel in meters
    //!
    //! \return     float
    //!
    float getDraught() const;

    //!              returns true if Draughtis used (optional field).
    //!
    //! \return     bool
    bool hasDraught();

    //!              sets the ETA: Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ) of the Expected Time Of Arrival of the target at the destination
    //!
    void setETA(QDateTime val);

    //!              gets the ETA: Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ) of the Expected Time Of Arrival of the target at the destination
    //!
    //! \return     QDateTime
    //!
    QDateTime getETA() const;

    //!              returns true if ETAis used (optional field).
    //!
    //! \return     bool
    bool hasETA();

    //!              sets the ISPSLevel: The ISPS level of the object (1 = normal, 2 = heightended, 3 = exceptional)
    //!
    void setISPSLevel(float val);

    //!              gets the ISPSLevel: The ISPS level of the object (1 = normal, 2 = heightended, 3 = exceptional)
    //!
    //! \return     float
    //!
    float getISPSLevel() const;

    //!              returns true if ISPSLevelis used (optional field).
    //!
    //! \return     bool
    bool hasISPSLevel();

    //!              sets the OverSizedLength: Length of the target in meter as confirmed by NCA, in case of a convoy of barges
    //!
    void setOverSizedLength(float val);

    //!              gets the OverSizedLength: Length of the target in meter as confirmed by NCA, in case of a convoy of barges
    //!
    //! \return     float
    //!
    float getOverSizedLength() const;

    //!              returns true if OverSizedLengthis used (optional field).
    //!
    //! \return     bool
    bool hasOverSizedLength();

    //!              sets the OverSizedWidth: Width of the target in meter as confirmed by the NCA, in case of a convoy of barges
    //!
    void setOverSizedWidth(float val);

    //!              gets the OverSizedWidth: Width of the target in meter as confirmed by the NCA, in case of a convoy of barges
    //!
    //! \return     float
    //!
    float getOverSizedWidth() const;

    //!              returns true if OverSizedWidthis used (optional field).
    //!
    //! \return     bool
    bool hasOverSizedWidth();

    //!              sets the NextPort: Next port of the target (UN/LOCODE)
    //!
    void setNextPort(QString val);

    //!              gets the NextPort: Next port of the target (UN/LOCODE)
    //!
    //! \return     QString
    //!
    QString getNextPort() const;

    //!              returns true if NextPortis used (optional field).
    //!
    //! \return     bool
    bool hasNextPort();

    //!              sets the PersonsOnBoard: The number of persons on board of the object, should equal the sum of crew, passengers and support personel if available
    //!
    void setPersonsOnBoard(float val);

    //!              gets the PersonsOnBoard: The number of persons on board of the object, should equal the sum of crew, passengers and support personel if available
    //!
    //! \return     float
    //!
    float getPersonsOnBoard() const;

    //!              returns true if PersonsOnBoardis used (optional field).
    //!
    //! \return     bool
    bool hasPersonsOnBoard();

    //!              sets the Pilots: Pilot status\n
    //!              0 = unknown\n
    //!              1 = pilot on board\n
    //!              2 = object under remote pilotage\n
    //!              3 = pilot required
    //!
    void setPilots(float val);

    //!              gets the Pilots: Pilot status\n
    //!              0 = unknown\n
    //!              1 = pilot on board\n
    //!              2 = object under remote pilotage\n
    //!              3 = pilot required
    //!
    //! \return     float
    //!
    float getPilots() const;

    //!              returns true if Pilotsis used (optional field).
    //!
    //! \return     bool
    bool hasPilots();

    //!              sets the PrevPort: Previous port of the target (UN/LOCODE)
    //!
    void setPrevPort(QString val);

    //!              gets the PrevPort: Previous port of the target (UN/LOCODE)
    //!
    //! \return     QString
    //!
    QString getPrevPort() const;

    //!              returns true if PrevPortis used (optional field).
    //!
    //! \return     bool
    bool hasPrevPort();

    //!              sets the RouteBound: This object is bound to the route of this voyage
    //!
    void setRouteBound(bool val);

    //!              gets the RouteBound: This object is bound to the route of this voyage
    //!
    //! \return     bool
    //!
    bool getRouteBound() const;

    //!              returns true if RouteBoundis used (optional field).
    //!
    //! \return     bool
    bool hasRouteBound();

    //!              sets the SourceId: Unique identification of the producer  (UN/LOCODE)  in case multiple producers exist on the same LOCODE, the local competent authority can optionally addended this with a local  code (e.g. BE ANR 01 = Antwerp, 01)
    //!
    void setSourceId(QString val);

    //!              gets the SourceId: Unique identification of the producer  (UN/LOCODE)  in case multiple producers exist on the same LOCODE, the local competent authority can optionally addended this with a local  code (e.g. BE ANR 01 = Antwerp, 01)
    //!
    //! \return     QString
    //!
    QString getSourceId() const;

    //!              returns true if SourceIdis used (optional field).
    //!
    //! \return     bool
    bool hasSourceId();

    //!              sets the SourceName: Identification of the originator of this data
    //!
    void setSourceName(QString val);

    //!              gets the SourceName: Identification of the originator of this data
    //!
    //! \return     QString
    //!
    QString getSourceName() const;

    //!              sets the SourceType: Source/originator type: 0 = unknown, 1 = transponder, 2 = database, 3 = manual, 4 =  fused
    //!
    void setSourceType(int val);

    //!              gets the SourceType: Source/originator type: 0 = unknown, 1 = transponder, 2 = database, 3 = manual, 4 =  fused
    //!
    //! \return     int
    //!
    int getSourceType() const;

    //!              sets the TankerStatus: Describes the status of the tanker\n
    //!              0 = Non gas free\n
    //!              1 = Gas free\n
    //!              2 = Inert
    //!
    void setTankerStatus(int val);

    //!              gets the TankerStatus: Describes the status of the tanker\n
    //!              0 = Non gas free\n
    //!              1 = Gas free\n
    //!              2 = Inert
    //!
    //! \return     int
    //!
    int getTankerStatus() const;

    //!              returns true if TankerStatusis used (optional field).
    //!
    //! \return     bool
    bool hasTankerStatus();

    //!              sets the Tugs: Object uses tugs
    //!
    void setTugs(bool val);

    //!              gets the Tugs: Object uses tugs
    //!
    //! \return     bool
    //!
    bool getTugs() const;

    //!              returns true if Tugsis used (optional field).
    //!
    //! \return     bool
    bool hasTugs();

    //!              sets the UpdateTime: Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ)  this data was compiled
    //!
    void setUpdateTime(QDateTime val);

    //!              gets the UpdateTime: Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sssZ)  this data was compiled
    //!
    //! \return     QDateTime
    //!
    QDateTime getUpdateTime() const;

    //!              generates XML of this object including attributes and child elements
    //!
    //! \return     QString
    QString toXML();

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString();

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead);

    //!              encodes a string returning the encoded string
    //!
    //! \return     QString
    QString encode(QString str);


private:
    QVector<Waypoint> m_waypoints;
    float m_airDraught;
    bool m_airDraughtPresent;
    int m_id;
    int m_cargoTypeIMO;
    bool m_cargoTypeIMOPresent;
    QString m_contactIdentity;
    bool m_contactIdentityPresent;
    QString m_destCode;
    bool m_destCodePresent;
    QString m_destName;
    bool m_destNamePresent;
    float m_draught;
    bool m_draughtPresent;
    QDateTime m_ETA;
    bool m_ETAPresent;
    float m_ISPSLevel;
    bool m_ISPSLevelPresent;
    float m_overSizedLength;
    bool m_overSizedLengthPresent;
    float m_overSizedWidth;
    bool m_overSizedWidthPresent;
    QString m_nextPort;
    bool m_nextPortPresent;
    float m_personsOnBoard;
    bool m_personsOnBoardPresent;
    float m_pilots;
    bool m_pilotsPresent;
    QString m_prevPort;
    bool m_prevPortPresent;
    bool m_routeBound;
    bool m_routeBoundPresent;
    QString m_sourceId;
    bool m_sourceIdPresent;
    QString m_sourceName;
    int m_sourceType;
    int m_tankerStatus;
    bool m_tankerStatusPresent;
    bool m_tugs;
    bool m_tugsPresent;
    QDateTime m_updateTime;

}; 

#endif

