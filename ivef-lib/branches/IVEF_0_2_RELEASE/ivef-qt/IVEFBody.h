/* 
 *  Body
 *
 *  Body is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Tue Jan 5 23:01:07 2010.
 **********************************************************************************
 *  Copyright 2009
 *
 */

#ifndef __BODY_H__
#define __BODY_H__

#include <QtCore>
#include "IVEFLoginRequest.h"
#include "IVEFLoginResponse.h"
#include "IVEFLogout.h"
#include "IVEFObjectDatas.h"
#include "IVEFPing.h"
#include "IVEFPong.h"
#include "IVEFServerStatus.h"
#include "IVEFServiceRequest.h"
#include "IVEFServiceRequestResponse.h"

//-----------------------------------------------------------
//! \brief       Class definition of Body
//!
//! 
//!

class Body : public QObject { 
    Q_OBJECT

public:
    //!constructor
    //!
    Body();
    //!copy constructor
    //!
    Body(const Body&);
    //!= operator
    //!
    Body & operator=(const Body&/*val*/);
    //!              sets the LoginRequest: MESSAGE sent by the user to identify oneselfs and request the default service
    //!
    void setLoginRequest(LoginRequest val);

    //!              gets the LoginRequest: MESSAGE sent by the user to identify oneselfs and request the default service
    //!
    //! \return     LoginRequest
    //!
    LoginRequest getLoginRequest() const;

    //!              returns true if LoginRequestis used (optional field).
    //!
    //! \return     bool
    bool hasLoginRequest();

    //!              sets the LoginResponse: MESSAGE sent by the supplier indicating wether the user login was accepted or not
    //!
    void setLoginResponse(LoginResponse val);

    //!              gets the LoginResponse: MESSAGE sent by the supplier indicating wether the user login was accepted or not
    //!
    //! \return     LoginResponse
    //!
    LoginResponse getLoginResponse() const;

    //!              returns true if LoginResponseis used (optional field).
    //!
    //! \return     bool
    bool hasLoginResponse();

    //!              sets the Logout: MESSAGE sent by the user to announce it will close it's connection
    //!
    void setLogout(Logout val);

    //!              gets the Logout: MESSAGE sent by the user to announce it will close it's connection
    //!
    //! \return     Logout
    //!
    Logout getLogout() const;

    //!              returns true if Logoutis used (optional field).
    //!
    //! \return     bool
    bool hasLogout();

    //!              sets the ObjectDatas
    //!
    void setObjectDatas(ObjectDatas val);

    //!              gets the ObjectDatas
    //!
    //! \return     ObjectDatas
    //!
    ObjectDatas getObjectDatas() const;

    //!              returns true if ObjectDatasis used (optional field).
    //!
    //! \return     bool
    bool hasObjectDatas();

    //!              sets the Ping: MESSAGE sent by either the user or the supplier to verify the aliveness of the connection, failure to respond within the timeout will lead to disconnect (default = 3 seconds)
    //!
    void setPing(Ping val);

    //!              gets the Ping: MESSAGE sent by either the user or the supplier to verify the aliveness of the connection, failure to respond within the timeout will lead to disconnect (default = 3 seconds)
    //!
    //! \return     Ping
    //!
    Ping getPing() const;

    //!              returns true if Pingis used (optional field).
    //!
    //! \return     bool
    bool hasPing();

    //!              sets the Pong: MESSAGE sent as reply to a MSG_Ping to confirm the aliveness of the connection.
    //!
    void setPong(Pong val);

    //!              gets the Pong: MESSAGE sent as reply to a MSG_Ping to confirm the aliveness of the connection.
    //!
    //! \return     Pong
    //!
    Pong getPong() const;

    //!              returns true if Pongis used (optional field).
    //!
    //! \return     bool
    bool hasPong();

    //!              sets the ServerStatus: MESSAGE sent by the server in case the server is experienceing / recovering from load problems
    //!
    void setServerStatus(ServerStatus val);

    //!              gets the ServerStatus: MESSAGE sent by the server in case the server is experienceing / recovering from load problems
    //!
    //! \return     ServerStatus
    //!
    ServerStatus getServerStatus() const;

    //!              returns true if ServerStatusis used (optional field).
    //!
    //! \return     bool
    bool hasServerStatus();

    //!              sets the ServiceRequest: MESSAGE sent by the user to request a different service than the current service, to stop all services request data from 0 areas or logout
    //!
    void setServiceRequest(ServiceRequest val);

    //!              gets the ServiceRequest: MESSAGE sent by the user to request a different service than the current service, to stop all services request data from 0 areas or logout
    //!
    //! \return     ServiceRequest
    //!
    ServiceRequest getServiceRequest() const;

    //!              returns true if ServiceRequestis used (optional field).
    //!
    //! \return     bool
    bool hasServiceRequest();

    //!              sets the ServiceRequestResponse: MESSAGE sent by the suplier as as a response to a service request
    //!
    void setServiceRequestResponse(ServiceRequestResponse val);

    //!              gets the ServiceRequestResponse: MESSAGE sent by the suplier as as a response to a service request
    //!
    //! \return     ServiceRequestResponse
    //!
    ServiceRequestResponse getServiceRequestResponse() const;

    //!              returns true if ServiceRequestResponseis used (optional field).
    //!
    //! \return     bool
    bool hasServiceRequestResponse();

    //!              generates XML of this object including attributes and child elements
    //!
    //! \return     QString
    QString toXML();

    //!              generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead);

    //!              encodes a string returning the encoded string
    //!
    //! \return     QString
    QString encode(QString str);


private:
    LoginRequest m_loginRequest;
    bool m_loginRequestPresent;
    LoginResponse m_loginResponse;
    bool m_loginResponsePresent;
    Logout m_logout;
    bool m_logoutPresent;
    ObjectDatas m_objectDatas;
    bool m_objectDatasPresent;
    Ping m_ping;
    bool m_pingPresent;
    Pong m_pong;
    bool m_pongPresent;
    ServerStatus m_serverStatus;
    bool m_serverStatusPresent;
    ServiceRequest m_serviceRequest;
    bool m_serviceRequestPresent;
    ServiceRequestResponse m_serviceRequestResponse;
    bool m_serviceRequestResponsePresent;

}; 

#endif

