/* 
 *  TrackData
 *
 *  TrackData is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Thu Apr 22 11:27:32 2010.
 **********************************************************************************
 *  Copyright 2010
 *
 */

package ivef;

import java.util.*;
import java.text.DecimalFormat;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import ivef.Pos;

public class TrackData { 

    private Vector<Pos> m_poss = new Vector<Pos>();
    private double m_COG; // default value is uninitialized
    private double m_estAccSOG; // default value is uninitialized
    private boolean m_estAccSOGPresent;
    private double m_estAccCOG; // default value is uninitialized
    private boolean m_estAccCOGPresent;
    private int m_id; // default value is uninitialized
    private double m_length; // default value is uninitialized
    private boolean m_lengthPresent;
    private int m_navStatus; // default value is uninitialized
    private boolean m_navStatusPresent;
    private double m_heading; // default value is uninitialized
    private boolean m_headingPresent;
    private double m_ROT; // default value is uninitialized
    private boolean m_ROTPresent;
    private double m_SOG; // default value is uninitialized
    private String m_sourceId; // default value is uninitialized
    private boolean m_sourceIdPresent;
    private String m_sourceName; // default value is uninitialized
    private Date m_updateTime; // default value is uninitialized
    private int m_trackStatus; // default value is uninitialized
    private double m_width; // default value is uninitialized
    private boolean m_widthPresent;

    public TrackData() {

        m_estAccSOGPresent = false;
        m_estAccCOGPresent = false;
        m_lengthPresent = false;
        m_navStatusPresent = false;
        m_headingPresent = false;
        m_ROTPresent = false;
        m_sourceIdPresent = false;
        m_widthPresent = false;
    }

    public TrackData(TrackData val) {

        for(int i=0; i < val.countOfPoss(); i++ ) {
            m_poss.add( val.getPosAt(i) );
        }
        m_COG = val.getCOG();
        m_estAccSOGPresent = val.hasEstAccSOG();
        m_estAccSOG = val.getEstAccSOG();
        m_estAccCOGPresent = val.hasEstAccCOG();
        m_estAccCOG = val.getEstAccCOG();
        m_id = val.getId();
        m_lengthPresent = val.hasLength();
        m_length = val.getLength();
        m_navStatusPresent = val.hasNavStatus();
        m_navStatus = val.getNavStatus();
        m_headingPresent = val.hasHeading();
        m_heading = val.getHeading();
        m_ROTPresent = val.hasROT();
        m_ROT = val.getROT();
        m_SOG = val.getSOG();
        m_sourceIdPresent = val.hasSourceId();
        m_sourceId = val.getSourceId();
        m_sourceName = val.getSourceName();
        m_updateTime = val.getUpdateTime();
        m_trackStatus = val.getTrackStatus();
        m_widthPresent = val.hasWidth();
        m_width = val.getWidth();
    }

    public void addPos(Pos val) {

        m_poss.add(val);
    }

    public Pos getPosAt(int i) {

        return (Pos) m_poss.get(i);
    }

    public int countOfPoss() {

        return m_poss.size();
    }

    public void setCOG(double val) {

        if (val < 0)
          return;
        if (val > 360)
          return;
        m_COG = val;
    }

    public double getCOG() {

        return m_COG;
    }

    public void setEstAccSOG(double val) {

        m_estAccSOGPresent = true;
        m_estAccSOG = val;
    }

    public double getEstAccSOG() {

        return m_estAccSOG;
    }

    public boolean hasEstAccSOG() {

        return m_estAccSOGPresent;
    }

    public void setEstAccCOG(double val) {

        m_estAccCOGPresent = true;
        m_estAccCOG = val;
    }

    public double getEstAccCOG() {

        return m_estAccCOG;
    }

    public boolean hasEstAccCOG() {

        return m_estAccCOGPresent;
    }

    public void setId(int val) {

        m_id = val;
    }

    public int getId() {

        return m_id;
    }

    public void setLength(double val) {

        if (val < 0)
          return;
        m_lengthPresent = true;
        m_length = val;
    }

    public double getLength() {

        return m_length;
    }

    public boolean hasLength() {

        return m_lengthPresent;
    }

    public void setNavStatus(int val) {

        if (val < 0)
          return;
        if (val > 15)
          return;
        m_navStatusPresent = true;
        m_navStatus = val;
    }

    public int getNavStatus() {

        return m_navStatus;
    }

    public boolean hasNavStatus() {

        return m_navStatusPresent;
    }

    public void setHeading(double val) {

        if (val < 0)
          return;
        if (val > 360)
          return;
        m_headingPresent = true;
        m_heading = val;
    }

    public double getHeading() {

        return m_heading;
    }

    public boolean hasHeading() {

        return m_headingPresent;
    }

    public void setROT(double val) {

        if (val < -720)
          return;
        if (val > 720)
          return;
        m_ROTPresent = true;
        m_ROT = val;
    }

    public double getROT() {

        return m_ROT;
    }

    public boolean hasROT() {

        return m_ROTPresent;
    }

    public void setSOG(double val) {

        if (val < 0)
          return;
        m_SOG = val;
    }

    public double getSOG() {

        return m_SOG;
    }

    public void setSourceId(String val) {

        m_sourceIdPresent = true;
        m_sourceId = val;
    }

    public String getSourceId() {

        return m_sourceId;
    }

    public boolean hasSourceId() {

        return m_sourceIdPresent;
    }

    public void setSourceName(String val) {

        m_sourceName = val;
    }

    public String getSourceName() {

        return m_sourceName;
    }

    public void setUpdateTime(Date val) {

        m_updateTime = val;
    }

    public Date getUpdateTime() {

        return m_updateTime;
    }

    public void setTrackStatus(int val) {

        if ( ( val != 1 ) &&
             ( val != 2 ) &&
             ( val != 3 ) )
            return;
        m_trackStatus = val;
    }

    public int getTrackStatus() {

        return m_trackStatus;
    }

    public void setWidth(double val) {

        if (val < 0)
          return;
        m_widthPresent = true;
        m_width = val;
    }

    public double getWidth() {

        return m_width;
    }

    public boolean hasWidth() {

        return m_widthPresent;
    }

    public String toXML() {

        String xml = "<TrackData";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        DecimalFormat nf = new DecimalFormat("0.000000");

        xml += " COG=\"" + nf.format(m_COG) + "\"";
        if ( hasEstAccSOG() ) {
            xml += " EstAccSOG=\"" + nf.format(m_estAccSOG) + "\"";
        }
        if ( hasEstAccCOG() ) {
            xml += " EstAccCOG=\"" + nf.format(m_estAccCOG) + "\"";
        }
        xml += " Id=\"" + m_id + "\"";
        if ( hasLength() ) {
            xml += " Length=\"" + nf.format(m_length) + "\"";
        }
        if ( hasNavStatus() ) {
            xml += " NavStatus=\"" + m_navStatus + "\"";
        }
        if ( hasHeading() ) {
            xml += " Heading=\"" + nf.format(m_heading) + "\"";
        }
        if ( hasROT() ) {
            xml += " ROT=\"" + nf.format(m_ROT) + "\"";
        }
        xml += " SOG=\"" + nf.format(m_SOG) + "\"";
        if ( hasSourceId() ) {
            xml += " SourceId=\"" + encode( m_sourceId) + "\"";
        }
        xml += " SourceName=\"" + encode( m_sourceName) + "\"";
        xml += " UpdateTime=\"" + df.format(m_updateTime) + "\"";
        xml += " TrackStatus=\"" + m_trackStatus + "\"";
        if ( hasWidth() ) {
            xml += " Width=\"" + nf.format(m_width) + "\"";
        }
        xml += ">\n";
        for(int i=0; i < m_poss.size(); i++ ) {
           Pos attribute = (Pos) m_poss.get(i);
            xml += attribute.toXML();
        }
        xml += "</TrackData>\n";
        return xml;
    }

    public String toString(String lead) {

        String str = lead + "TrackData\n";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        DecimalFormat nf = new DecimalFormat("0.000000");

        str +=  lead + "    COG = " + nf.format(m_COG) + "\n";
        if ( hasEstAccSOG() ) {
            str +=  lead + "    EstAccSOG = " + nf.format(m_estAccSOG) + "\n";
        }
        if ( hasEstAccCOG() ) {
            str +=  lead + "    EstAccCOG = " + nf.format(m_estAccCOG) + "\n";
        }
        str +=  lead + "    Id = " + m_id + "\n";
        if ( hasLength() ) {
            str +=  lead + "    Length = " + nf.format(m_length) + "\n";
        }
        if ( hasNavStatus() ) {
            str +=  lead + "    NavStatus = " + m_navStatus + "\n";
        }
        if ( hasHeading() ) {
            str +=  lead + "    Heading = " + nf.format(m_heading) + "\n";
        }
        if ( hasROT() ) {
            str +=  lead + "    ROT = " + nf.format(m_ROT) + "\n";
        }
        str +=  lead + "    SOG = " + nf.format(m_SOG) + "\n";
        if ( hasSourceId() ) {
            str +=  lead + "    SourceId = " + m_sourceId + "\n";
        }
        str +=  lead + "    SourceName = " + m_sourceName + "\n";
        str +=  lead + "    UpdateTime = " + df.format(m_updateTime) + "\n";
        str +=  lead + "    TrackStatus = " + m_trackStatus + "\n";
        if ( hasWidth() ) {
            str +=  lead + "    Width = " + nf.format(m_width) + "\n";
        }
        for(int i=0; i < m_poss.size(); i++ ) {
           Pos attribute = (Pos) m_poss.get(i);
           str += attribute.toString(lead + "    ");
        }
        return str;
    }
    public String encode( String str) {

        str = str.replaceAll("&", "&amp;");
        str = str.replaceAll("<", "&lt;");
        str = str.replaceAll(">", "&gt;");
        str = str.replaceAll("\"", "&quot;");
        return str;
    }


}
