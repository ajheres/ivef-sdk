/* 
 *  Construction
 *
 *  Construction is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Thu Apr 1 13:04:12 2010.
 **********************************************************************************
 *  Copyright 2008
 *
 */

package ivef;

import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import ivef.UnType;

public class Construction { 

    private UnType m_unType; // default value is uninitialized
    private String m_hullColor; // default value is uninitialized
    private boolean m_hullColorPresent;
    private int m_hullType; // default value is uninitialized
    private boolean m_hullTypePresent;
    private double m_length; // default value is uninitialized
    private boolean m_lengthPresent;
    private int m_lloydsShipType; // default value is uninitialized
    private boolean m_lloydsShipTypePresent;
    private double m_maxKeelHeight; // default value is uninitialized
    private boolean m_maxKeelHeightPresent;
    private double m_maxDraught; // default value is uninitialized
    private boolean m_maxDraughtPresent;
    private double m_maxPersonsOnBoard; // default value is uninitialized
    private boolean m_maxPersonsOnBoardPresent;
    private double m_maxSpeed; // default value is uninitialized
    private boolean m_maxSpeedPresent;
    private double m_width; // default value is uninitialized
    private boolean m_widthPresent;

    public Construction() {

        m_hullColorPresent = false;
        m_hullTypePresent = false;
        m_lengthPresent = false;
        m_lloydsShipTypePresent = false;
        m_maxKeelHeightPresent = false;
        m_maxDraughtPresent = false;
        m_maxPersonsOnBoardPresent = false;
        m_maxSpeedPresent = false;
        m_widthPresent = false;
    }

    public Construction(Construction val) {

        m_unType = val.getUnType();
        m_hullColorPresent = val.hasHullColor();
        m_hullColor = val.getHullColor();
        m_hullTypePresent = val.hasHullType();
        m_hullType = val.getHullType();
        m_lengthPresent = val.hasLength();
        m_length = val.getLength();
        m_lloydsShipTypePresent = val.hasLloydsShipType();
        m_lloydsShipType = val.getLloydsShipType();
        m_maxKeelHeightPresent = val.hasMaxKeelHeight();
        m_maxKeelHeight = val.getMaxKeelHeight();
        m_maxDraughtPresent = val.hasMaxDraught();
        m_maxDraught = val.getMaxDraught();
        m_maxPersonsOnBoardPresent = val.hasMaxPersonsOnBoard();
        m_maxPersonsOnBoard = val.getMaxPersonsOnBoard();
        m_maxSpeedPresent = val.hasMaxSpeed();
        m_maxSpeed = val.getMaxSpeed();
        m_widthPresent = val.hasWidth();
        m_width = val.getWidth();
    }

    public void setUnType(UnType val) {

        m_unType = val;
    }

    public UnType getUnType() {

        return m_unType;
    }

    public void setHullColor(String val) {

        m_hullColorPresent = true;
        m_hullColor = val;
    }

    public String getHullColor() {

        return m_hullColor;
    }

    public boolean hasHullColor() {

        return m_hullColorPresent;
    }

    public void setHullType(int val) {

        if ( ( val != 1 ) &&
             ( val != 2 ) &&
             ( val != 3 ) )
            return;
        m_hullTypePresent = true;
        m_hullType = val;
    }

    public int getHullType() {

        return m_hullType;
    }

    public boolean hasHullType() {

        return m_hullTypePresent;
    }

    public void setLength(double val) {

        if (val < 0)
          return;
        m_lengthPresent = true;
        m_length = val;
    }

    public double getLength() {

        return m_length;
    }

    public boolean hasLength() {

        return m_lengthPresent;
    }

    public void setLloydsShipType(int val) {

        m_lloydsShipTypePresent = true;
        m_lloydsShipType = val;
    }

    public int getLloydsShipType() {

        return m_lloydsShipType;
    }

    public boolean hasLloydsShipType() {

        return m_lloydsShipTypePresent;
    }

    public void setMaxKeelHeight(double val) {

        if (val < 0)
          return;
        m_maxKeelHeightPresent = true;
        m_maxKeelHeight = val;
    }

    public double getMaxKeelHeight() {

        return m_maxKeelHeight;
    }

    public boolean hasMaxKeelHeight() {

        return m_maxKeelHeightPresent;
    }

    public void setMaxDraught(double val) {

        if (val < 0)
          return;
        m_maxDraughtPresent = true;
        m_maxDraught = val;
    }

    public double getMaxDraught() {

        return m_maxDraught;
    }

    public boolean hasMaxDraught() {

        return m_maxDraughtPresent;
    }

    public void setMaxPersonsOnBoard(double val) {

        if (val < 0)
          return;
        m_maxPersonsOnBoardPresent = true;
        m_maxPersonsOnBoard = val;
    }

    public double getMaxPersonsOnBoard() {

        return m_maxPersonsOnBoard;
    }

    public boolean hasMaxPersonsOnBoard() {

        return m_maxPersonsOnBoardPresent;
    }

    public void setMaxSpeed(double val) {

        if (val < 0)
          return;
        m_maxSpeedPresent = true;
        m_maxSpeed = val;
    }

    public double getMaxSpeed() {

        return m_maxSpeed;
    }

    public boolean hasMaxSpeed() {

        return m_maxSpeedPresent;
    }

    public void setWidth(double val) {

        if (val < 0)
          return;
        m_widthPresent = true;
        m_width = val;
    }

    public double getWidth() {

        return m_width;
    }

    public boolean hasWidth() {

        return m_widthPresent;
    }

    public String toXML() {

        String xml = "<Construction";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSSZ");

        if ( hasHullColor() ) {
            xml += " HullColor=\"" + encode( m_hullColor) + "\"";
        }
        if ( hasHullType() ) {
            xml += " HullType=\"" + m_hullType + "\"";
        }
        if ( hasLength() ) {
            xml += " Length=\"" + m_length + "\"";
        }
        if ( hasLloydsShipType() ) {
            xml += " LloydsShipType=\"" + m_lloydsShipType + "\"";
        }
        if ( hasMaxKeelHeight() ) {
            xml += " MaxKeelHeight=\"" + m_maxKeelHeight + "\"";
        }
        if ( hasMaxDraught() ) {
            xml += " MaxDraught=\"" + m_maxDraught + "\"";
        }
        if ( hasMaxPersonsOnBoard() ) {
            xml += " MaxPersonsOnBoard=\"" + m_maxPersonsOnBoard + "\"";
        }
        if ( hasMaxSpeed() ) {
            xml += " MaxSpeed=\"" + m_maxSpeed + "\"";
        }
        if ( hasWidth() ) {
            xml += " Width=\"" + m_width + "\"";
        }
        xml += ">\n";
        xml +=  m_unType.toXML();
        xml += "</Construction>\n";
        return xml;
    }

    public String toString(String lead) {

        String str = lead + "Construction\n";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.SSSZ");

        if ( hasHullColor() ) {
            str +=  lead + "    HullColor = " + m_hullColor + "\n";
        }
        if ( hasHullType() ) {
            str +=  lead + "    HullType = " + m_hullType + "\n";
        }
        if ( hasLength() ) {
            str +=  lead + "    Length = " + m_length + "\n";
        }
        if ( hasLloydsShipType() ) {
            str +=  lead + "    LloydsShipType = " + m_lloydsShipType + "\n";
        }
        if ( hasMaxKeelHeight() ) {
            str +=  lead + "    MaxKeelHeight = " + m_maxKeelHeight + "\n";
        }
        if ( hasMaxDraught() ) {
            str +=  lead + "    MaxDraught = " + m_maxDraught + "\n";
        }
        if ( hasMaxPersonsOnBoard() ) {
            str +=  lead + "    MaxPersonsOnBoard = " + m_maxPersonsOnBoard + "\n";
        }
        if ( hasMaxSpeed() ) {
            str +=  lead + "    MaxSpeed = " + m_maxSpeed + "\n";
        }
        if ( hasWidth() ) {
            str +=  lead + "    Width = " + m_width + "\n";
        }
        str +=  m_unType.toString(lead + "    ");
        return str;
    }
    public String encode( String str) {

        str = str.replaceAll("&", "&amp;");
        str = str.replaceAll("<", "&lt;");
        str = str.replaceAll(">", "&gt;");
        str = str.replaceAll("\"", "&quot;");
        return str;
    }


}
