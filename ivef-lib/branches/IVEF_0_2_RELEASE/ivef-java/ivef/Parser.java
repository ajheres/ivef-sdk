/* 
 *  Parser
 *
 *  Parser is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Wed Apr 7 16:25:09 2010.
 **********************************************************************************
 *  Copyright 2008
 *
 */

package ivef;

import ivef.ParserListener;
import java.util.*;
import java.text.DateFormat;
import java.io.*;
import java.text.SimpleDateFormat;
import javax.xml.parsers.*;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
import ivef.MSG_IVEF;
import ivef.Body;
import ivef.ObjectDatas;
import ivef.Area;
import ivef.OtherId;
import ivef.OtherName;
import ivef.Header;
import ivef.LoginRequest;
import ivef.LoginResponse;
import ivef.Logout;
import ivef.ObjectData;
import ivef.Ping;
import ivef.Pong;
import ivef.Pos;
import ivef.ServerStatus;
import ivef.ServiceRequest;
import ivef.Transmission;
import ivef.Item;
import ivef.Filter;
import ivef.ServiceRequestResponse;
import ivef.TaggedItem;
import ivef.TrackData;
import ivef.VesselData;
import ivef.Construction;
import ivef.UnType;
import ivef.Identifier;
import ivef.VoyageData;
import ivef.Waypoint;

public class Parser extends DefaultHandler { 

    private String m_dataBuffer = new String();
    private ParserListener m_handler =  null;
    private Stack m_objStack = new Stack(); // cannot use a template since it stores different Objects
    private SAXParser parser; // init in constructor

    public Parser(ParserListener handler) {

        m_handler = handler;

        // set the parser
        SAXParserFactory factory = SAXParserFactory.newInstance();
        try { 
            parser = factory.newSAXParser();
        } catch(Exception e) {
            e.printStackTrace();
        }
}


    public void startElement(String namespaceUri,
                             String localName,
                             String qName,
                             Attributes atts) {

    // check all possible options
    if (qName == "MSG_IVEF") {
        MSG_IVEF obj = new MSG_IVEF();
        m_objStack.push( obj );
    }
    else if (qName == "Body") {
        Body obj = new Body();
        m_objStack.push( obj );
    }
    else if (qName == "ObjectDatas") {
        ObjectDatas obj = new ObjectDatas();
        m_objStack.push( obj );
    }
    else if (qName == "Area") {
        Area obj = new Area();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Name") {
                String val = value;
                obj.setName(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "OtherId") {
        OtherId obj = new OtherId();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Id") {
                String val = value;
                obj.setId(val);
            }
            else if (key == "Value") {
                String val = value;
                obj.setValue(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "OtherName") {
        OtherName obj = new OtherName();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Lang") {
                String val = value;
                obj.setLang(val);
            }
            else if (key == "Name") {
                String val = value;
                obj.setName(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Header") {
        Header obj = new Header();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "MsgRefId") {
                String val = value;
                obj.setMsgRefId(val);
            }
            else if (key == "Version") {
                String val = value;
                obj.setVersion(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "LoginRequest") {
        LoginRequest obj = new LoginRequest();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Encryption") {
                int val = Integer.parseInt(value);
                obj.setEncryption(val);
            }
            else if (key == "Name") {
                String val = value;
                obj.setName(val);
            }
            else if (key == "Password") {
                String val = value;
                obj.setPassword(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "LoginResponse") {
        LoginResponse obj = new LoginResponse();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Reason") {
                String val = value;
                obj.setReason(val);
            }
            else if (key == "ResponseOn") {
                String val = value;
                obj.setResponseOn(val);
            }
            else if (key == "Result") {
                int val = Integer.parseInt(value);
                obj.setResult(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Logout") {
        Logout obj = new Logout();
        m_objStack.push( obj );
    }
    else if (qName == "ObjectData") {
        ObjectData obj = new ObjectData();
        m_objStack.push( obj );
    }
    else if (qName == "Ping") {
        Ping obj = new Ping();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "TimeStamp") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setTimeStamp(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Pong") {
        Pong obj = new Pong();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "ResponseOn") {
                String val = value;
                obj.setResponseOn(val);
            }
            else if (key == "SourceId") {
                int val = Integer.parseInt(value);
                obj.setSourceId(val);
            }
            else if (key == "TimeStamp") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setTimeStamp(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Pos") {
        Pos obj = new Pos();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Altitude") {
                double val = Double.parseDouble(value);
                obj.setAltitude(val);
            }
            else if (key == "EstAccAlt") {
                double val = Double.parseDouble(value);
                obj.setEstAccAlt(val);
            }
            else if (key == "EstAccLat") {
                double val = Double.parseDouble(value);
                obj.setEstAccLat(val);
            }
            else if (key == "EstAccLong") {
                double val = Double.parseDouble(value);
                obj.setEstAccLong(val);
            }
            else if (key == "Lat") {
                double val = Double.parseDouble(value);
                obj.setLat(val);
            }
            else if (key == "Long") {
                double val = Double.parseDouble(value);
                obj.setLong(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "ServerStatus") {
        ServerStatus obj = new ServerStatus();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "ContactIdentity") {
                String val = value;
                obj.setContactIdentity(val);
            }
            else if (key == "Details") {
                String val = value;
                obj.setDetails(val);
            }
            else if (key == "Status") {
                boolean val = (value.toUpperCase() == "YES" ||
                               value.toUpperCase() == "TRUE" ||
                               value.toUpperCase() == "1");
                obj.setStatus(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "ServiceRequest") {
        ServiceRequest obj = new ServiceRequest();
        m_objStack.push( obj );
    }
    else if (qName == "Transmission") {
        Transmission obj = new Transmission();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Type") {
                int val = Integer.parseInt(value);
                obj.setType(val);
            }
            else if (key == "Period") {
                double val = Double.parseDouble(value);
                obj.setPeriod(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Item") {
        Item obj = new Item();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "DataSelector") {
                int val = Integer.parseInt(value);
                obj.setDataSelector(val);
            }
            else if (key == "FieldSelector") {
                String val = value;
                obj.setFieldSelector(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Filter") {
        Filter obj = new Filter();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Predicate") {
                String val = value;
                obj.setPredicate(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "ServiceRequestResponse") {
        ServiceRequestResponse obj = new ServiceRequestResponse();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Reason") {
                String val = value;
                obj.setReason(val);
            }
            else if (key == "ResponseOn") {
                String val = value;
                obj.setResponseOn(val);
            }
            else if (key == "Result") {
                int val = Integer.parseInt(value);
                obj.setResult(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "TaggedItem") {
        TaggedItem obj = new TaggedItem();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Key") {
                String val = value;
                obj.setKey(val);
            }
            else if (key == "Value") {
                String val = value;
                obj.setValue(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "TrackData") {
        TrackData obj = new TrackData();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "COG") {
                double val = Double.parseDouble(value);
                obj.setCOG(val);
            }
            else if (key == "EstAccSOG") {
                double val = Double.parseDouble(value);
                obj.setEstAccSOG(val);
            }
            else if (key == "EstAccCOG") {
                double val = Double.parseDouble(value);
                obj.setEstAccCOG(val);
            }
            else if (key == "Id") {
                int val = Integer.parseInt(value);
                obj.setId(val);
            }
            else if (key == "Length") {
                double val = Double.parseDouble(value);
                obj.setLength(val);
            }
            else if (key == "NavStatus") {
                int val = Integer.parseInt(value);
                obj.setNavStatus(val);
            }
            else if (key == "Heading") {
                double val = Double.parseDouble(value);
                obj.setHeading(val);
            }
            else if (key == "ROT") {
                double val = Double.parseDouble(value);
                obj.setROT(val);
            }
            else if (key == "SOG") {
                double val = Double.parseDouble(value);
                obj.setSOG(val);
            }
            else if (key == "SourceId") {
                String val = value;
                obj.setSourceId(val);
            }
            else if (key == "SourceName") {
                String val = value;
                obj.setSourceName(val);
            }
            else if (key == "UpdateTime") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setUpdateTime(val);
            }
            else if (key == "TrackStatus") {
                int val = Integer.parseInt(value);
                obj.setTrackStatus(val);
            }
            else if (key == "Width") {
                double val = Double.parseDouble(value);
                obj.setWidth(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "VesselData") {
        VesselData obj = new VesselData();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Class") {
                int val = Integer.parseInt(value);
                obj.setIVEFClass(val);
            }
            else if (key == "BlackListed") {
                boolean val = (value.toUpperCase() == "YES" ||
                               value.toUpperCase() == "TRUE" ||
                               value.toUpperCase() == "1");
                obj.setBlackListed(val);
            }
            else if (key == "Id") {
                int val = Integer.parseInt(value);
                obj.setId(val);
            }
            else if (key == "SpecialAttention") {
                String val = value;
                obj.setSpecialAttention(val);
            }
            else if (key == "SourceId") {
                String val = value;
                obj.setSourceId(val);
            }
            else if (key == "SourceName") {
                String val = value;
                obj.setSourceName(val);
            }
            else if (key == "SourceType") {
                int val = Integer.parseInt(value);
                obj.setSourceType(val);
            }
            else if (key == "UpdateTime") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setUpdateTime(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Construction") {
        Construction obj = new Construction();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "HullColor") {
                String val = value;
                obj.setHullColor(val);
            }
            else if (key == "HullType") {
                int val = Integer.parseInt(value);
                obj.setHullType(val);
            }
            else if (key == "Length") {
                double val = Double.parseDouble(value);
                obj.setLength(val);
            }
            else if (key == "LloydsShipType") {
                int val = Integer.parseInt(value);
                obj.setLloydsShipType(val);
            }
            else if (key == "MaxKeelHeight") {
                double val = Double.parseDouble(value);
                obj.setMaxKeelHeight(val);
            }
            else if (key == "MaxDraught") {
                double val = Double.parseDouble(value);
                obj.setMaxDraught(val);
            }
            else if (key == "MaxPersonsOnBoard") {
                double val = Double.parseDouble(value);
                obj.setMaxPersonsOnBoard(val);
            }
            else if (key == "MaxSpeed") {
                double val = Double.parseDouble(value);
                obj.setMaxSpeed(val);
            }
            else if (key == "Width") {
                double val = Double.parseDouble(value);
                obj.setWidth(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "UnType") {
        UnType obj = new UnType();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "CodeA") {
                int val = Integer.parseInt(value);
                obj.setCodeA(val);
            }
            else if (key == "CodeB") {
                int val = Integer.parseInt(value);
                obj.setCodeB(val);
            }
            else if (key == "Mode") {
                int val = Integer.parseInt(value);
                obj.setMode(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Identifier") {
        Identifier obj = new Identifier();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "Callsign") {
                String val = value;
                obj.setCallsign(val);
            }
            else if (key == "IMO") {
                int val = Integer.parseInt(value);
                obj.setIMO(val);
            }
            else if (key == "Name") {
                String val = value;
                obj.setName(val);
            }
            else if (key == "MMSI") {
                int val = Integer.parseInt(value);
                obj.setMMSI(val);
            }
            else if (key == "LRIT") {
                String val = value;
                obj.setLRIT(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "VoyageData") {
        VoyageData obj = new VoyageData();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "AirDraught") {
                double val = Double.parseDouble(value);
                obj.setAirDraught(val);
            }
            else if (key == "Id") {
                int val = Integer.parseInt(value);
                obj.setId(val);
            }
            else if (key == "CargoTypeIMO") {
                int val = Integer.parseInt(value);
                obj.setCargoTypeIMO(val);
            }
            else if (key == "ContactIdentity") {
                String val = value;
                obj.setContactIdentity(val);
            }
            else if (key == "DestCode") {
                String val = value;
                obj.setDestCode(val);
            }
            else if (key == "DestName") {
                String val = value;
                obj.setDestName(val);
            }
            else if (key == "Draught") {
                double val = Double.parseDouble(value);
                obj.setDraught(val);
            }
            else if (key == "ETA") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setETA(val);
            }
            else if (key == "ISPSLevel") {
                double val = Double.parseDouble(value);
                obj.setISPSLevel(val);
            }
            else if (key == "OverSizedLength") {
                double val = Double.parseDouble(value);
                obj.setOverSizedLength(val);
            }
            else if (key == "OverSizedWidth") {
                double val = Double.parseDouble(value);
                obj.setOverSizedWidth(val);
            }
            else if (key == "NextPort") {
                String val = value;
                obj.setNextPort(val);
            }
            else if (key == "PersonsOnBoard") {
                double val = Double.parseDouble(value);
                obj.setPersonsOnBoard(val);
            }
            else if (key == "Pilots") {
                double val = Double.parseDouble(value);
                obj.setPilots(val);
            }
            else if (key == "PrevPort") {
                String val = value;
                obj.setPrevPort(val);
            }
            else if (key == "RouteBound") {
                boolean val = (value.toUpperCase() == "YES" ||
                               value.toUpperCase() == "TRUE" ||
                               value.toUpperCase() == "1");
                obj.setRouteBound(val);
            }
            else if (key == "SourceId") {
                String val = value;
                obj.setSourceId(val);
            }
            else if (key == "SourceName") {
                String val = value;
                obj.setSourceName(val);
            }
            else if (key == "SourceType") {
                int val = Integer.parseInt(value);
                obj.setSourceType(val);
            }
            else if (key == "TankerStatus") {
                int val = Integer.parseInt(value);
                obj.setTankerStatus(val);
            }
            else if (key == "Tugs") {
                boolean val = (value.toUpperCase() == "YES" ||
                               value.toUpperCase() == "TRUE" ||
                               value.toUpperCase() == "1");
                obj.setTugs(val);
            }
            else if (key == "UpdateTime") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setUpdateTime(val);
            }
        }
        m_objStack.push( obj );
    }
    else if (qName == "Waypoint") {
        Waypoint obj = new Waypoint();
        for (int i=0; i < atts.getLength(); i++) {
            String key = atts.getLocalName(i);
            String value = atts.getValue(i);

            if (key == "ATA") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setATA(val);
            }
            else if (key == "ETA") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setETA(val);
            }
            else if (key == "RTA") {
                if (value.endsWith("Z")) { 
                    value = value.substring(0, value.length() - 1);
                } 
                Date val = new Date(); // starts since the epoch
                try { 
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                    val = df.parse( value );
                } catch(Exception e) {
                    try { // if there are no miliseconds they will not be sent
                       DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                       val = df.parse( value );
                    } catch(Exception e2) {
                        e2.printStackTrace();
                    }
                }
                obj.setRTA(val);
            }
            else if (key == "LoCode") {
                String val = value;
                obj.setLoCode(val);
            }
            else if (key == "Name") {
                String val = value;
                obj.setName(val);
            }
        }
        m_objStack.push( obj );
    }
}

    public void endElement(String namespaceUri,
                           String localName,
                           String qName) {

    // check all possible options
    if (qName == "MSG_IVEF") {

        MSG_IVEF obj = (MSG_IVEF) ( m_objStack.pop() );
        if (m_handler != null) 
            m_handler.handleMSG_IVEF( obj ); 
    }
    else if (qName == "Body") {

        Body obj = (Body) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new MSG_IVEF().getClass() ) {
                ((MSG_IVEF) ( m_objStack.peek() ) ).setBody( obj );
        }
    }
    else if (qName == "ObjectDatas") {

        ObjectDatas obj = (ObjectDatas) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setObjectDatas( obj );
        }
    }
    else if (qName == "Area") {

        Area obj = (Area) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                ((ServiceRequest) ( m_objStack.peek() ) ).addArea( obj );
        }
    }
    else if (qName == "OtherId") {

        OtherId obj = (OtherId) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Identifier().getClass() ) {
                ((Identifier) ( m_objStack.peek() ) ).addOtherId( obj );
        }
    }
    else if (qName == "OtherName") {

        OtherName obj = (OtherName) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Identifier().getClass() ) {
                ((Identifier) ( m_objStack.peek() ) ).addOtherName( obj );
        }
    }
    else if (qName == "Header") {

        Header obj = (Header) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new MSG_IVEF().getClass() ) {
                ((MSG_IVEF) ( m_objStack.peek() ) ).setHeader( obj );
        }
    }
    else if (qName == "LoginRequest") {

        LoginRequest obj = (LoginRequest) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setLoginRequest( obj );
        }
    }
    else if (qName == "LoginResponse") {

        LoginResponse obj = (LoginResponse) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setLoginResponse( obj );
        }
    }
    else if (qName == "Logout") {

        Logout obj = (Logout) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setLogout( obj );
        }
    }
    else if (qName == "ObjectData") {

        ObjectData obj = (ObjectData) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ObjectDatas().getClass() ) {
                ((ObjectDatas) ( m_objStack.peek() ) ).addObjectData( obj );
        }
    }
    else if (qName == "Ping") {

        Ping obj = (Ping) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setPing( obj );
        }
    }
    else if (qName == "Pong") {

        Pong obj = (Pong) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setPong( obj );
        }
    }
    else if (qName == "Pos") {

        Pos obj = (Pos) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Area().getClass() ) {
                ((Area) ( m_objStack.peek() ) ).addPos( obj );
        }
        if ( m_objStack.peek().getClass() == new TrackData().getClass() ) {
                ((TrackData) ( m_objStack.peek() ) ).addPos( obj );
        }
        if ( m_objStack.peek().getClass() == new Waypoint().getClass() ) {
                ((Waypoint) ( m_objStack.peek() ) ).setPos( obj );
        }
    }
    else if (qName == "ServerStatus") {

        ServerStatus obj = (ServerStatus) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setServerStatus( obj );
        }
    }
    else if (qName == "ServiceRequest") {

        ServiceRequest obj = (ServiceRequest) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setServiceRequest( obj );
        }
    }
    else if (qName == "Transmission") {

        Transmission obj = (Transmission) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                ((ServiceRequest) ( m_objStack.peek() ) ).setTransmission( obj );
        }
    }
    else if (qName == "Item") {

        Item obj = (Item) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                ((ServiceRequest) ( m_objStack.peek() ) ).addItem( obj );
        }
    }
    else if (qName == "Filter") {

        Filter obj = (Filter) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ServiceRequest().getClass() ) {
                ((ServiceRequest) ( m_objStack.peek() ) ).setFilter( obj );
        }
    }
    else if (qName == "ServiceRequestResponse") {

        ServiceRequestResponse obj = (ServiceRequestResponse) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Body().getClass() ) {
                ((Body) ( m_objStack.peek() ) ).setServiceRequestResponse( obj );
        }
    }
    else if (qName == "TaggedItem") {

        TaggedItem obj = (TaggedItem) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ObjectData().getClass() ) {
                ((ObjectData) ( m_objStack.peek() ) ).addTaggedItem( obj );
        }
    }
    else if (qName == "TrackData") {

        TrackData obj = (TrackData) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ObjectData().getClass() ) {
                ((ObjectData) ( m_objStack.peek() ) ).setTrackData( obj );
        }
    }
    else if (qName == "VesselData") {

        VesselData obj = (VesselData) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ObjectData().getClass() ) {
                ((ObjectData) ( m_objStack.peek() ) ).addVesselData( obj );
        }
    }
    else if (qName == "Construction") {

        Construction obj = (Construction) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new VesselData().getClass() ) {
                ((VesselData) ( m_objStack.peek() ) ).setConstruction( obj );
        }
    }
    else if (qName == "UnType") {

        UnType obj = (UnType) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new Construction().getClass() ) {
                ((Construction) ( m_objStack.peek() ) ).setUnType( obj );
        }
    }
    else if (qName == "Identifier") {

        Identifier obj = (Identifier) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new VesselData().getClass() ) {
                ((VesselData) ( m_objStack.peek() ) ).setIdentifier( obj );
        }
    }
    else if (qName == "VoyageData") {

        VoyageData obj = (VoyageData) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new ObjectData().getClass() ) {
                ((ObjectData) ( m_objStack.peek() ) ).addVoyageData( obj );
        }
    }
    else if (qName == "Waypoint") {

        Waypoint obj = (Waypoint) ( m_objStack.pop() );
        if ( m_objStack.peek().getClass() == new VoyageData().getClass() ) {
                ((VoyageData) ( m_objStack.peek() ) ).addWaypoint( obj );
        }
    }
}

    public boolean parseXMLString(String data, boolean cont) { 

     m_dataBuffer += data;

     int index[] = new int[1], indexMax = -1;

     // note that if a message does not exist the index will be equal to strlen(name\n) - 1 so indexMax is always > 0
     index[0] = m_dataBuffer.lastIndexOf("</MSG_IVEF>") + ("</MSG_IVEF>").length();
     for (int i=0; i<1; i++) {
         if (index[i] > indexMax) {
             indexMax = index[i];
         }
     }

     if (indexMax > 30) {
         String messages = m_dataBuffer.substring(0, indexMax);
         m_dataBuffer = m_dataBuffer.substring(indexMax); // remove up to indexMax
         try { 
             parser.parse(new InputSource(new StringReader(messages)), this);
         } catch(Exception e) {
             String errorMessage =
                 "Error parsing " + messages + ": " + e;
             System.err.println(errorMessage);
             e.printStackTrace();
         }
     } else {
         return false; // not enough data in string
     }
     if (!cont) {
         m_dataBuffer = "";
     }
     return true;
}


}
