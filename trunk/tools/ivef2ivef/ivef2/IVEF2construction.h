/* 
 *  Construction
 *
 *  Construction is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Thu Sep 4 16:29:01 2008.
 **********************************************************************************
 *  Copyright 2008
 *
 */

#ifndef __CONSTRUCTION_H__
#define __CONSTRUCTION_H__

#include <QtCore>

class Construction : public QObject { 
    Q_OBJECT

public:
    Construction();
    Construction(const Construction&);
    Construction & operator=(const Construction&/*val*/);

    /* Type:
       In case Object Class = (Virtual) Aids To Navigation (5/6): 
       0 = Unknown
       1 = Unknown fixed
       2 = Unknown floating
       3 = Fixed off shore structure
       5 = Light, without sectors
       6 = Light, with sectors
       7 = Leading Light Front
       8 = Leading Light Rear
       9 = Beacon, Cardinal N
       10 = Beacon, Cardinal E
       11 = Beacon, Cardinal S
       12 = Beacon, Cardinal W
       13 = Beacon, Port hand
       14 = Beacon, Starboard hand
       15 = Beacon, Preferred Channel port hand
       16 = Beacon, Preferred Channel starboard hand
       17 = Beacon, Isolated danger
       18 = Beacon, Safe water
       19 = Beacon, Special mark
       20 = Cardinal Mark N
       21 = Cardinal Mark E
       22 = Cardinal Mark S
       23 = Cardinal Mark W
       24 = Port hand Mark
       25 = Starboard hand Mark
       26 = Preferred Channel Port hand
       27 = Preferred Channel Starboard hand
       28 = Isolated danger
       29 = Safe Water
       30 = Special Mark
       31 = Light Vessel / LANBY/Rigs
       32 = Reference point
       33 = RACON
       
       In case Object Class = vessel (2):
       120 = WIG
       130 = fishing vessel
       131 = towing vessel
       132 = big towing vessel
       133 = dredging vessel
       134 = diving vessel
       135 = military vessel
       136 = sailing vessel
       137 = pleasure craft
       140 = HSC
       150 = pilot vessel
       151 = SAR
       152 = tug
       153 = port tender
       154 = anti pollution vessel
       155 = law enforcement vessel
       158 = medical vessel
       159 = mob83 vessel
       160 = passenger ship
       170 = cargo ship
       180 = tanker
       190 = other types of ship
       191 = convoy */
    void setType(int val);
    int getType() const;
    bool hasType();

    /* LloydsShipType:
       Number indicating type of vessel */
    void setLloydsShipType(int val);
    int getLloydsShipType() const;
    bool hasLloydsShipType();

    /* Length:
       Length of the target in meter */
    void setLength(float val);
    float getLength() const;
    bool hasLength();

    /* Breadth:
       Breadth of the target in meter */
    void setBreadth(float val);
    float getBreadth() const;
    bool hasBreadth();

    /* MaxAirDraught:
       Maximum air draught of the vessel in meters */
    void setMaxAirDraught(float val);
    float getMaxAirDraught() const;
    bool hasMaxAirDraught();

    /* MaxDraught:
       Maximum draught of the vessel in meters */
    void setMaxDraught(float val);
    float getMaxDraught() const;
    bool hasMaxDraught();

    /* DeepWater:
       Object requires deep water (deep water vessel indicator) */
    void setDeepWater(bool val);
    bool getDeepWater() const;
    bool hasDeepWater();

    /* HullMaterial:
       Material used for Hull construction */
    void setHullMaterial(QString val);
    QString getHullMaterial() const;
    bool hasHullMaterial();

    /* HullColor:
       Color of Hull (in RGB hex) */
    void setHullColor(QString val);
    QString getHullColor() const;
    bool hasHullColor();

    /* Constructor:
       Identification of the constructing shipyard */
    void setConstructor(QString val);
    QString getConstructor() const;
    bool hasConstructor();

    /* GrossWeight:
       Gross weight in tons */
    void setGrossWeight(float val);
    float getGrossWeight() const;
    bool hasGrossWeight();

    /* NetWeight:
       Net weight in tons */
    void setNetWeight(float val);
    float getNetWeight() const;
    bool hasNetWeight();

    /* DeadWeight:
       Dead weight in tons */
    void setDeadWeight(float val);
    float getDeadWeight() const;
    bool hasDeadWeight();

    /* MaxPassenger:
       The maximum number of passengers on board of the object */
    void setMaxPassenger(float val);
    float getMaxPassenger() const;
    bool hasMaxPassenger();

    /* MaxCrew:
       The maximum number of crew on board of the object */
    void setMaxCrew(float val);
    float getMaxCrew() const;
    bool hasMaxCrew();

    /* MaxSupport:
       The max number of support personel on board of the object */
    void setMaxSupport(float val);
    float getMaxSupport() const;
    bool hasMaxSupport();

    /* MaxSpeed:
       The maximum speed the object is able to sustain with normal draft and load */
    void setMaxSpeed(float val);
    float getMaxSpeed() const;
    bool hasMaxSpeed();
    QString toXML();
    QString toString(QString lead);

private:
    int m_type;
    bool m_typePresent;
    int m_lloydsShipType;
    bool m_lloydsShipTypePresent;
    float m_length;
    bool m_lengthPresent;
    float m_breadth;
    bool m_breadthPresent;
    float m_maxAirDraught;
    bool m_maxAirDraughtPresent;
    float m_maxDraught;
    bool m_maxDraughtPresent;
    bool m_deepWater;
    bool m_deepWaterPresent;
    QString m_hullMaterial;
    bool m_hullMaterialPresent;
    QString m_hullColor;
    bool m_hullColorPresent;
    QString m_constructor;
    bool m_constructorPresent;
    float m_grossWeight;
    bool m_grossWeightPresent;
    float m_netWeight;
    bool m_netWeightPresent;
    float m_deadWeight;
    bool m_deadWeightPresent;
    float m_maxPassenger;
    bool m_maxPassengerPresent;
    float m_maxCrew;
    bool m_maxCrewPresent;
    float m_maxSupport;
    bool m_maxSupportPresent;
    float m_maxSpeed;
    bool m_maxSpeedPresent;

}; 

#endif

