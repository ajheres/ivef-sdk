/* 
 *  PosReport
 *
 *  PosReport is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Thu Sep 4 16:29:00 2008.
 **********************************************************************************
 *  Copyright 2008
 *
 */

#ifndef __POSREPORT_H__
#define __POSREPORT_H__

#include <QtCore>
#include "IVEF2pos.h"
#include "IVEF2alert.h"
#include "IVEF2sensor.h"

class PosReport : public QObject { 
    Q_OBJECT

public:
    PosReport();
    PosReport(const PosReport&);
    PosReport & operator=(const PosReport&/*val*/);
    void setPos(Pos val);
    Pos getPos() const;
    void addAlert(Alert val);
    Alert getAlertAt(int i) const;
    int countOfAlerts() const;

    /* Sensor:
       Sensors contributing to this postion report */
    void addSensor(Sensor val);
    Sensor getSensorAt(int i) const;
    int countOfSensors() const;

    /* Id:
       The unique identification of this track. Valid from first message with TrackStatus!=Terminated to first message with TrackStatus=Terminated */
    void setId(int val);
    int getId() const;

    /* SourceId:
       The unique identification of the node who initially created this message */
    void setSourceId(int val);
    int getSourceId() const;

    /* SourceName:
       Identification of the originator of the data */
    void setSourceName(QString val);
    QString getSourceName() const;
    bool hasSourceName();

    /* UpdateTime:
       Date and time in UTC format (YYYY-MM-DDThh:mm:ss.sss) (subset of ISO 8601)  this position was measured. */
    void setUpdateTime(QDateTime val);
    QDateTime getUpdateTime() const;

    /* SOG:
       Speed over ground in meters per second */
    void setSOG(float val);
    float getSOG() const;

    /* COG:
       Course over ground  in degrees. (0-360) */
    void setCOG(float val);
    float getCOG() const;

    /* Orientation:
       Orientation of the target in degrees */
    void setOrientation(float val);
    float getOrientation() const;
    bool hasOrientation();

    /* EstAccSOG:
       Estimated accuracy
       (i.e. standard deviation) of the calculated value 
       expressed in m */
    void setEstAccSOG(float val);
    float getEstAccSOG() const;
    bool hasEstAccSOG();

    /* EstAccCOG:
       Estimated accuracy
       (i.e. standard deviation) of the calculated value 
       expressed in m */
    void setEstAccCOG(float val);
    float getEstAccCOG() const;
    bool hasEstAccCOG();

    /* EstAccOrientation:
       Estimated accuracy
       (i.e. standard deviation) of the calculated value 
       expressed in m */
    void setEstAccOrientation(float val);
    float getEstAccOrientation() const;
    bool hasEstAccOrientation();

    /* TrackStatus:
       1 = Updated, 2 = Coasted, 3 = Terminated */
    void setTrackStatus(int val);
    int getTrackStatus() const;

    /* ROT:
       Rate of turn in degrees per minute */
    void setROT(float val);
    float getROT() const;
    bool hasROT();

    /* Length:
       Length of the target in meter */
    void setLength(float val);
    float getLength() const;
    bool hasLength();

    /* Breadth:
       Breadth of the target in  meter */
    void setBreadth(float val);
    float getBreadth() const;
    bool hasBreadth();

    /* Altitude:
       The altitude of the target above the WGS-84 ellipsoid in meters */
    void setAltitude(float val);
    float getAltitude() const;
    bool hasAltitude();

    /* NavStatus:
       Navigation status of the target
       0 = under way using engine
       1 = at anchor
       2 = not under command
       3 = restricted manoeuvrability
       4 = constrained by her draught
       5 = moored
       6 = aground
       7 = engaged in fishing
       8 = under way sailing
       9 - 14 = reserved for future use
       15 = undefined default */
    void setNavStatus(int val);
    int getNavStatus() const;
    bool hasNavStatus();

    /* UpdSensorType:
       Type of detection or track type:
       1 = radar
       2 = ais
       3 = ais+radar
       4 = deadreckoning
       5 = other */
    void setUpdSensorType(int val);
    int getUpdSensorType() const;
    bool hasUpdSensorType();
    QString toXML();
    QString toString(QString lead);

private:
    Pos m_pos;
    QVector<Alert> m_alerts;
    QVector<Sensor> m_sensors;
    int m_id;
    int m_sourceId;
    QString m_sourceName;
    bool m_sourceNamePresent;
    QDateTime m_updateTime;
    float m_SOG;
    float m_COG;
    float m_orientation;
    bool m_orientationPresent;
    float m_estAccSOG;
    bool m_estAccSOGPresent;
    float m_estAccCOG;
    bool m_estAccCOGPresent;
    float m_estAccOrientation;
    bool m_estAccOrientationPresent;
    int m_trackStatus;
    float m_ROT;
    bool m_ROTPresent;
    float m_length;
    bool m_lengthPresent;
    float m_breadth;
    bool m_breadthPresent;
    float m_altitude;
    bool m_altitudePresent;
    int m_navStatus;
    bool m_navStatusPresent;
    int m_updSensorType;
    bool m_updSensorTypePresent;

}; 

#endif

