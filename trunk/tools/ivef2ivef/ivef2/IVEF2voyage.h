/* 
 *  Voyage
 *
 *  Voyage is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Thu Sep 4 16:29:01 2008.
 **********************************************************************************
 *  Copyright 2008
 *
 */

#ifndef __VOYAGE_H__
#define __VOYAGE_H__

#include <QtCore>
#include "IVEF2taggeditems.h"
#include "IVEF2waypoints.h"

class Voyage : public QObject { 
    Q_OBJECT

public:
    Voyage();
    Voyage(const Voyage&);
    Voyage & operator=(const Voyage&/*val*/);

    /* TaggedItems:
       Generic key/value pairs, can be used to pass information that is not (yet) in the standard, provided server and user agree upon interface */
    void addTaggedItems(TaggedItems val);
    TaggedItems getTaggedItemsAt(int i) const;
    int countOfTaggedItemss() const;

    /* Waypoints:
       Waypoints belonging to the route of this voyage */
    void addWaypoints(Waypoints val);
    Waypoints getWaypointsAt(int i) const;
    int countOfWaypointss() const;

    /* Id:
       The identification of this voyage */
    void setId(QString val);
    QString getId() const;

    /* SourceType:
       Source/originator type: 1 = transponder 2 = database 3 = manual */
    void setSourceType(int val);
    int getSourceType() const;

    /* SourceId:
       The unique identification of the node who initially created this message */
    void setSourceId(int val);
    int getSourceId() const;

    /* SourceName:
       Identification of the originator of this data */
    void setSourceName(QString val);
    QString getSourceName() const;
    bool hasSourceName();

    /* UpdateTime:
       Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sss)  this data was compiled */
    void setUpdateTime(QDateTime val);
    QDateTime getUpdateTime() const;
    bool hasUpdateTime();

    /* CargoType:
       0 = All ships of this type
       1 = Carrying DG, HS, or MP, IMO hazard or pollutant category A
       2 = Carrying DG, HS, or MP, IMO hazard or pollutant category B
       3 = Carrying DG, HS, or MP, IMO hazard or pollutant category C
       4 = Carrying DG, HS, or MP, IMO hazard or pollutant category D
       9 = No additional information */
    void setCargoType(int val);
    int getCargoType() const;
    bool hasCargoType();

    /* CargoDescr:
       Description of the cargo */
    void setCargoDescr(QString val);
    QString getCargoDescr() const;
    bool hasCargoDescr();

    /* CargoWeight:
       Weight of the cargo in tons */
    void setCargoWeight(int val);
    int getCargoWeight() const;
    bool hasCargoWeight();

    /* Loaded:
       Loaded or unloaded with cargo */
    void setLoaded(bool val);
    bool getLoaded() const;
    bool hasLoaded();

    /* DestCode:
       Destination of the target (UN/LOCODE) */
    void setDestCode(QString val);
    QString getDestCode() const;
    bool hasDestCode();

    /* DestName:
       Destination name of the target e.g. local code for berth/lock/bridge/terminal */
    void setDestName(QString val);
    QString getDestName() const;
    bool hasDestName();

    /* ETA:
       Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sss) of the Expected Time Of Arrival of the target. */
    void setETA(QDateTime val);
    QDateTime getETA() const;
    bool hasETA();

    /* ATA:
       Date and time in (subset of ISO 8601) UTC format (YYYY-MM-DDThh:mm:ss.sss) of the Actual Time Of Arrival of the target. */
    void setATA(QDateTime val);
    QDateTime getATA() const;
    bool hasATA();

    /* AirDraught:
       Actual air draught of the vessel in meters */
    void setAirDraught(float val);
    float getAirDraught() const;
    bool hasAirDraught();

    /* Draught:
       Actual draught of the vessel in meters */
    void setDraught(float val);
    float getDraught() const;
    bool hasDraught();

    /* Route:
       Identification of route bounded to this vessel, if not present, not bound to route */
    void setRoute(QString val);
    QString getRoute() const;
    bool hasRoute();

    /* PersonsOnBoard:
       The number of persons on board of the object, should equal the sum of crew, passengers and support personel if available */
    void setPersonsOnBoard(float val);
    float getPersonsOnBoard() const;
    bool hasPersonsOnBoard();

    /* Crew:
       The number of crew on board of the object */
    void setCrew(float val);
    float getCrew() const;
    bool hasCrew();

    /* Passengers:
       The number of passengers on board of the object */
    void setPassengers(float val);
    float getPassengers() const;
    bool hasPassengers();

    /* Support:
       The number of support personel on board of the object */
    void setSupport(float val);
    float getSupport() const;
    bool hasSupport();

    /* Tugs:
       Number of supporting tugs */
    void setTugs(float val);
    float getTugs() const;
    bool hasTugs();
    QString toXML();
    QString toString(QString lead);

private:
    QVector<TaggedItems> m_taggedItemss;
    QVector<Waypoints> m_waypointss;
    QString m_id;
    int m_sourceType;
    int m_sourceId;
    QString m_sourceName;
    bool m_sourceNamePresent;
    QDateTime m_updateTime;
    bool m_updateTimePresent;
    int m_cargoType;
    bool m_cargoTypePresent;
    QString m_cargoDescr;
    bool m_cargoDescrPresent;
    int m_cargoWeight;
    bool m_cargoWeightPresent;
    bool m_loaded;
    bool m_loadedPresent;
    QString m_destCode;
    bool m_destCodePresent;
    QString m_destName;
    bool m_destNamePresent;
    QDateTime m_ETA;
    bool m_ETAPresent;
    QDateTime m_ATA;
    bool m_ATAPresent;
    float m_airDraught;
    bool m_airDraughtPresent;
    float m_draught;
    bool m_draughtPresent;
    QString m_route;
    bool m_routePresent;
    float m_personsOnBoard;
    bool m_personsOnBoardPresent;
    float m_crew;
    bool m_crewPresent;
    float m_passengers;
    bool m_passengersPresent;
    float m_support;
    bool m_supportPresent;
    float m_tugs;
    bool m_tugsPresent;

}; 

#endif

