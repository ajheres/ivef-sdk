/* 
 *  StaticData
 *
 *  StaticData is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by xsd2code on Thu Sep 4 16:29:00 2008.
 **********************************************************************************
 *  Copyright 2008
 *
 */

#ifndef __STATICDATA_H__
#define __STATICDATA_H__

#include <QtCore>
#include "IVEF2identifier.h"
#include "IVEF2taggeditems.h"
#include "IVEF2construction.h"
#include "IVEF2propulsion.h"
#include "IVEF2owner.h"

class StaticData : public QObject { 
    Q_OBJECT

public:
    StaticData();
    StaticData(const StaticData&);
    StaticData & operator=(const StaticData&/*val*/);

    /* Identifier:
       (local) Identification of vessel */
    void setIdentifier(Identifier val);
    Identifier getIdentifier() const;

    /* TaggedItems:
       Generic key/value pairs, can be used to pass information that is not (yet) in the standard, provided server and user agree upon interface */
    void addTaggedItems(TaggedItems val);
    TaggedItems getTaggedItemsAt(int i) const;
    int countOfTaggedItemss() const;

    /* Construction:
       attributes of the object regarding the physical construction */
    void setConstruction(Construction val);
    Construction getConstruction() const;

    /* Propulsion:
       attributes of the object regarding the propulsion */
    void addPropulsion(Propulsion val);
    Propulsion getPropulsionAt(int i) const;
    int countOfPropulsions() const;

    /* Owner:
       attributes of the object regarding the ownership */
    void setOwner(Owner val);
    Owner getOwner() const;

    /* Id:
       The unique identification of this static data, can be updated but not be terminated (terminate object in stead) */
    void setId(int val);
    int getId() const;

    /* SourceId:
       The unique identification of the node who initially created this message */
    void setSourceId(int val);
    int getSourceId() const;

    /* SourceName:
       Identification of the originator of the data */
    void setSourceName(QString val);
    QString getSourceName() const;
    bool hasSourceName();

    /* SourceType:
       Source/originator type: 1 = AIS transponder 2 = VTS Database 3 = Operator */
    void setSourceType(int val);
    int getSourceType() const;

    /* Class:
       1 = Aircraft
       2 = Vessel
       3 = Vehicle (not an aircraft or vessel)
       4 = BaseStation
       5 = Aids to Navigate
       6 = Virtual Aids to Navigate
       7 = Field Transponder */
    void setClass(int val);
    int getClass() const;
    bool hasClass();

    /* UpdateTime:
       Date and time in UTC format (YYYY-MM-DDThh:mm:ss.sss)  (subset of ISO 8601) this data was compiled */
    void setUpdateTime(QDateTime val);
    QDateTime getUpdateTime() const;
    bool hasUpdateTime();
    QString toXML();
    QString toString(QString lead);

private:
    Identifier m_identifier;
    QVector<TaggedItems> m_taggedItemss;
    Construction m_construction;
    QVector<Propulsion> m_propulsions;
    Owner m_owner;
    int m_id;
    int m_sourceId;
    QString m_sourceName;
    bool m_sourceNamePresent;
    int m_sourceType;
    int m_class;
    bool m_classPresent;
    QDateTime m_updateTime;
    bool m_updateTimePresent;

}; 

#endif

